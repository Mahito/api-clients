/**
 * Miro API
 * Miro API
 *
 * The version of the OpenAPI document: 0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

import fetch, {Response} from 'node-fetch'
import * as http from 'http'

/* tslint:disable:no-unused-locals */
import {DataClassificationOrganizationSettings} from '../model/dataClassificationOrganizationSettings'

import {ObjectSerializer} from '../model/models'

import {HttpError, makeJsonRequest} from './apis'

let defaultBasePath = 'https://api.miro.com'

export interface BoardClassificationOrganizationLevelApiMethods {
  /**
   * Retrieves board classification settings for an existing organization.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">organizations:read</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 2</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=\"blank\" href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
   * @summary Get organization settings
   * @param orgId id of the organization
   */
  enterpriseDataclassificationOrganizationSettingsGet(
    orgId: string,
  ): Promise<{response: Response; body: DataClassificationOrganizationSettings}>
}

export function BoardClassificationOrganizationLevelApi(
  accessToken: string | (() => Promise<string>),
  basePath: string = defaultBasePath,
  logger?: (...thing: any) => void,
): BoardClassificationOrganizationLevelApiMethods {
  return {
    /*
     */

    enterpriseDataclassificationOrganizationSettingsGet: async function (
      orgId: string,
    ): Promise<{response: Response; body: DataClassificationOrganizationSettings}> {
      const localVarPath = '/v2/orgs/{org_id}/data-classification-settings'.replace(
        '{' + 'org_id' + '}',
        encodeURIComponent(String(orgId)),
      )
      let localVarQueryParameters = new URLSearchParams()
      // verify required parameter 'orgId' is not null or undefined
      if (orgId === null || orgId === undefined) {
        throw new Error(
          'Required parameter orgId was null or undefined when calling enterpriseDataclassificationOrganizationSettingsGet.',
        )
      }

      const resource = new URL(localVarPath, basePath)
      resource.search = localVarQueryParameters.toString()

      const {response, bodyAsJson} = await makeJsonRequest(
        typeof accessToken === 'function' ? await accessToken() : accessToken,
        'GET',
        resource,
        undefined,

        logger,
      )

      const body = ObjectSerializer.deserialize(bodyAsJson, 'DataClassificationOrganizationSettings')

      return {response, body}
    },
  }
}
