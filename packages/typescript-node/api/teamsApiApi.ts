/**
 * Miro API
 * Miro API
 *
 * The version of the OpenAPI document: 0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

import fetch, {Response} from 'node-fetch'
import * as http from 'http'

/* tslint:disable:no-unused-locals */
import {CreateTeamRequest} from '../model/createTeamRequest'
import {Team} from '../model/team'
import {TeamChanges} from '../model/teamChanges'

import {ObjectSerializer} from '../model/models'

import {HttpError, makeJsonRequest} from './apis'

let defaultBasePath = 'https://api.miro.com'

export interface TeamsApiApiMethods {
  /**
   * Creates a new team in an existing organization.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">organizations:teams:write</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 1</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=\"blank\" href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
   * @summary Create team
   * @param orgId The id of an Organization.
   * @param createTeamRequest
   */
  enterpriseCreateTeam(orgId: string, createTeamRequest: CreateTeamRequest): Promise<{response: Response; body: Team}>
  /**
   * Deletes an existing team.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">organizations:teams:write</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 4</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=\"blank\" href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
   * @summary Delete team
   * @param orgId The id of an Organization.
   * @param teamId The id of a Team.
   */
  enterpriseDeleteTeam(orgId: string, teamId: string): Promise<{response: Response; body: object}>
  /**
   * Retrieves team information for an existing team.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">organizations:teams:read</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 1</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=\"blank\" href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
   * @summary Get team
   * @param orgId The id of an Organization.
   * @param teamId The id of a Team.
   */
  enterpriseGetTeam(orgId: string, teamId: string): Promise<{response: Response; body: Team}>
  /**
   * Retrieves list of teams in an existing organization.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">organizations:teams:read</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 1</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=\"blank\" href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
   * @summary List teams
   * @param orgId The id of an Organization.
   * @param limit Limit of teams in result list
   * @param cursor Team id that will be used to find team next to this id in the sorted list
   * @param filterQuery Filtering query
   */
  enterpriseGetTeams(
    orgId: string,
    query?: {
      limit?: number

      cursor?: string

      filterQuery?: string
    },
  ): Promise<{response: Response; body: Array<Team>}>
  /**
   * Updates an existing team.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">organizations:teams:write</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 1</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=\"blank\" href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
   * @summary Update team
   * @param orgId The id of an Organization.
   * @param teamId The id of a Team.
   * @param teamChanges
   */
  enterpriseUpdateTeam(
    orgId: string,
    teamId: string,
    teamChanges: TeamChanges,
  ): Promise<{response: Response; body: Team}>
}

export function TeamsApiApi(
  accessToken: string | (() => Promise<string>),
  basePath: string = defaultBasePath,
  logger?: (...thing: any) => void,
): TeamsApiApiMethods {
  return {
    /*
     */

    enterpriseCreateTeam: async function (
      orgId: string,
      createTeamRequest: CreateTeamRequest,
    ): Promise<{response: Response; body: Team}> {
      const localVarPath = '/v2/orgs/{org_id}/teams'.replace('{' + 'org_id' + '}', encodeURIComponent(String(orgId)))
      let localVarQueryParameters = new URLSearchParams()
      // verify required parameter 'orgId' is not null or undefined
      if (orgId === null || orgId === undefined) {
        throw new Error('Required parameter orgId was null or undefined when calling enterpriseCreateTeam.')
      }

      const resource = new URL(localVarPath, basePath)
      resource.search = localVarQueryParameters.toString()

      const {response, bodyAsJson} = await makeJsonRequest(
        typeof accessToken === 'function' ? await accessToken() : accessToken,
        'POST',
        resource,
        JSON.stringify(ObjectSerializer.serialize(createTeamRequest, 'CreateTeamRequest')),

        logger,
      )

      const body = ObjectSerializer.deserialize(bodyAsJson, 'Team')

      return {response, body}
    },

    /*
     */

    enterpriseDeleteTeam: async function (orgId: string, teamId: string): Promise<{response: Response; body: object}> {
      const localVarPath = '/v2/orgs/{org_id}/teams/{team_id}'
        .replace('{' + 'org_id' + '}', encodeURIComponent(String(orgId)))
        .replace('{' + 'team_id' + '}', encodeURIComponent(String(teamId)))
      let localVarQueryParameters = new URLSearchParams()
      // verify required parameter 'orgId' is not null or undefined
      if (orgId === null || orgId === undefined) {
        throw new Error('Required parameter orgId was null or undefined when calling enterpriseDeleteTeam.')
      }
      // verify required parameter 'teamId' is not null or undefined
      if (teamId === null || teamId === undefined) {
        throw new Error('Required parameter teamId was null or undefined when calling enterpriseDeleteTeam.')
      }

      const resource = new URL(localVarPath, basePath)
      resource.search = localVarQueryParameters.toString()

      const {response, bodyAsJson} = await makeJsonRequest(
        typeof accessToken === 'function' ? await accessToken() : accessToken,
        'DELETE',
        resource,
        undefined,

        logger,
      )

      const body = ObjectSerializer.deserialize(bodyAsJson, 'object')

      return {response, body}
    },

    /*
     */

    enterpriseGetTeam: async function (orgId: string, teamId: string): Promise<{response: Response; body: Team}> {
      const localVarPath = '/v2/orgs/{org_id}/teams/{team_id}'
        .replace('{' + 'org_id' + '}', encodeURIComponent(String(orgId)))
        .replace('{' + 'team_id' + '}', encodeURIComponent(String(teamId)))
      let localVarQueryParameters = new URLSearchParams()
      // verify required parameter 'orgId' is not null or undefined
      if (orgId === null || orgId === undefined) {
        throw new Error('Required parameter orgId was null or undefined when calling enterpriseGetTeam.')
      }
      // verify required parameter 'teamId' is not null or undefined
      if (teamId === null || teamId === undefined) {
        throw new Error('Required parameter teamId was null or undefined when calling enterpriseGetTeam.')
      }

      const resource = new URL(localVarPath, basePath)
      resource.search = localVarQueryParameters.toString()

      const {response, bodyAsJson} = await makeJsonRequest(
        typeof accessToken === 'function' ? await accessToken() : accessToken,
        'GET',
        resource,
        undefined,

        logger,
      )

      const body = ObjectSerializer.deserialize(bodyAsJson, 'Team')

      return {response, body}
    },

    /*
     */

    enterpriseGetTeams: async function (
      orgId: string,
      query?: {
        limit?: number

        cursor?: string

        filterQuery?: string
      },
    ): Promise<{response: Response; body: Array<Team>}> {
      const localVarPath = '/v2/orgs/{org_id}/teams'.replace('{' + 'org_id' + '}', encodeURIComponent(String(orgId)))
      let localVarQueryParameters = new URLSearchParams()
      // verify required parameter 'orgId' is not null or undefined
      if (orgId === null || orgId === undefined) {
        throw new Error('Required parameter orgId was null or undefined when calling enterpriseGetTeams.')
      }

      if (query?.limit !== undefined) {
        localVarQueryParameters.append('limit', ObjectSerializer.serialize(query?.limit, 'number'))
      }

      if (query?.cursor !== undefined) {
        localVarQueryParameters.append('cursor', ObjectSerializer.serialize(query?.cursor, 'string'))
      }

      if (query?.filterQuery !== undefined) {
        localVarQueryParameters.append('filterQuery', ObjectSerializer.serialize(query?.filterQuery, 'string'))
      }

      const resource = new URL(localVarPath, basePath)
      resource.search = localVarQueryParameters.toString()

      const {response, bodyAsJson} = await makeJsonRequest(
        typeof accessToken === 'function' ? await accessToken() : accessToken,
        'GET',
        resource,
        undefined,

        logger,
      )

      const body = ObjectSerializer.deserialize(bodyAsJson, 'Array<Team>')

      return {response, body}
    },

    /*
     */

    enterpriseUpdateTeam: async function (
      orgId: string,
      teamId: string,
      teamChanges: TeamChanges,
    ): Promise<{response: Response; body: Team}> {
      const localVarPath = '/v2/orgs/{org_id}/teams/{team_id}'
        .replace('{' + 'org_id' + '}', encodeURIComponent(String(orgId)))
        .replace('{' + 'team_id' + '}', encodeURIComponent(String(teamId)))
      let localVarQueryParameters = new URLSearchParams()
      // verify required parameter 'orgId' is not null or undefined
      if (orgId === null || orgId === undefined) {
        throw new Error('Required parameter orgId was null or undefined when calling enterpriseUpdateTeam.')
      }
      // verify required parameter 'teamId' is not null or undefined
      if (teamId === null || teamId === undefined) {
        throw new Error('Required parameter teamId was null or undefined when calling enterpriseUpdateTeam.')
      }

      const resource = new URL(localVarPath, basePath)
      resource.search = localVarQueryParameters.toString()

      const {response, bodyAsJson} = await makeJsonRequest(
        typeof accessToken === 'function' ? await accessToken() : accessToken,
        'PATCH',
        resource,
        JSON.stringify(ObjectSerializer.serialize(teamChanges, 'TeamChanges')),

        logger,
      )

      const body = ObjectSerializer.deserialize(bodyAsJson, 'Team')

      return {response, body}
    },
  }
}
