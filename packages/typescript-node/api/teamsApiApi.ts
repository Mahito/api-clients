/**
 * Miro API
 * Miro API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import fetch, {Response} from 'node-fetch';
import * as http from 'http';

/* tslint:disable:no-unused-locals */
import { CreateTeamRequest } from '../model/createTeamRequest';
import { Team } from '../model/team';
import { TeamChanges } from '../model/teamChanges';

import { ObjectSerializer } from '../model/models';

import { HttpError } from './apis';

let defaultBasePath = 'https://api.miro.com';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================


export interface TeamsApiApiMethods {
    /**
     * Creates a new team in an existing organization.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">organizations:teams:write</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 1</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=\"blank\" href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
     * @summary Create team
     * @param orgId The id of an Organization.
     * @param createTeamRequest 
     */
    enterpriseCreateTeam(orgId: string, createTeamRequest: CreateTeamRequest, 
): Promise<{ response: Response; body: Team;  }>
    /**
     * Deletes an existing team.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">organizations:teams:write</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 4</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=\"blank\" href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
     * @summary Delete team
     * @param orgId The id of an Organization.
     * @param teamId The id of a Team.
     */
    enterpriseDeleteTeam(orgId: string, teamId: string, 
): Promise<{ response: Response; body: object;  }>
    /**
     * Retrieves team information for an existing team.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">organizations:teams:read</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 1</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=\"blank\" href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
     * @summary Get team
     * @param orgId The id of an Organization.
     * @param teamId The id of a Team.
     */
    enterpriseGetTeam(orgId: string, teamId: string, 
): Promise<{ response: Response; body: Team;  }>
    /**
     * Retrieves list of teams in an existing organization.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">organizations:teams:read</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 1</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=\"blank\" href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
     * @summary List teams
     * @param orgId The id of an Organization.
     * @param limit Limit of teams in result list
     * @param cursor Team id that will be used to find team next to this id in the sorted list
     * @param filterQuery Filtering query
     */
    enterpriseGetTeams(orgId: string, 
 query?: { 

limit?: number,
 


cursor?: string,
 


filterQuery?: string,
 },  
): Promise<{ response: Response; body: Array<Team>;  }>
    /**
     * Updates an existing team.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">organizations:teams:write</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 1</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=\"blank\" href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
     * @summary Update team
     * @param orgId The id of an Organization.
     * @param teamId The id of a Team.
     * @param teamChanges 
     */
    enterpriseUpdateTeam(orgId: string, teamId: string, teamChanges: TeamChanges, 
): Promise<{ response: Response; body: Team;  }>
}

export function TeamsApiApi (accessToken: string|(() => Promise<string>), basePath: string = defaultBasePath, logger?: (...thing: any) => void): TeamsApiApiMethods {
    return {

        /*
        */

        enterpriseCreateTeam: async function (orgId: string, createTeamRequest: CreateTeamRequest, 
) : Promise<{ response: Response; body: Team;  }> {
            const localVarPath = '/v2/orgs/{org_id}/teams'
                .replace('{' + 'org_id' + '}', encodeURIComponent(String(orgId)));
            let localVarQueryParameters = new URLSearchParams();
            let localVarHeaderParams: Record<string, string> = {}
            const produces = ['application/json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }

            // verify required parameter 'orgId' is not null or undefined
            if (orgId === null || orgId === undefined) {
                throw new Error('Required parameter orgId was null or undefined when calling enterpriseCreateTeam.');
            }



            const resource = new URL(localVarPath, basePath)
            resource.search = localVarQueryParameters.toString()


const options = {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${typeof accessToken === 'function' ? await accessToken() : accessToken}`
                },
                body: JSON.stringify(ObjectSerializer.serialize(createTeamRequest, "CreateTeamRequest"))
            }

            if (typeof logger === 'function') logger('FETCH', resource.toString(), options)

            const response = await fetch(resource, options)

            if (typeof logger === 'function') logger('RESPONSE', response)

            let bodyAsJson: unknown
            try {
                bodyAsJson = await response.json()
            } catch (err) {
                // Body doesn't have valid json
            }

            if (typeof logger === 'function' && bodyAsJson) logger('BODY', bodyAsJson)

            if (!response.ok) {
                throw new HttpError(response, bodyAsJson, response.status)
            }

            const body = ObjectSerializer.deserialize(bodyAsJson, "Team");

            return({response, body})
        },

        /*
        */

        enterpriseDeleteTeam: async function (orgId: string, teamId: string, 
) : Promise<{ response: Response; body: object;  }> {
            const localVarPath = '/v2/orgs/{org_id}/teams/{team_id}'
                .replace('{' + 'org_id' + '}', encodeURIComponent(String(orgId)))
                .replace('{' + 'team_id' + '}', encodeURIComponent(String(teamId)));
            let localVarQueryParameters = new URLSearchParams();
            let localVarHeaderParams: Record<string, string> = {}
            const produces = ['application/json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }

            // verify required parameter 'orgId' is not null or undefined
            if (orgId === null || orgId === undefined) {
                throw new Error('Required parameter orgId was null or undefined when calling enterpriseDeleteTeam.');
            }

            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new Error('Required parameter teamId was null or undefined when calling enterpriseDeleteTeam.');
            }



            const resource = new URL(localVarPath, basePath)
            resource.search = localVarQueryParameters.toString()


const options = {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${typeof accessToken === 'function' ? await accessToken() : accessToken}`
                },
            }

            if (typeof logger === 'function') logger('FETCH', resource.toString(), options)

            const response = await fetch(resource, options)

            if (typeof logger === 'function') logger('RESPONSE', response)

            let bodyAsJson: unknown
            try {
                bodyAsJson = await response.json()
            } catch (err) {
                // Body doesn't have valid json
            }

            if (typeof logger === 'function' && bodyAsJson) logger('BODY', bodyAsJson)

            if (!response.ok) {
                throw new HttpError(response, bodyAsJson, response.status)
            }

            const body = ObjectSerializer.deserialize(bodyAsJson, "object");

            return({response, body})
        },

        /*
        */

        enterpriseGetTeam: async function (orgId: string, teamId: string, 
) : Promise<{ response: Response; body: Team;  }> {
            const localVarPath = '/v2/orgs/{org_id}/teams/{team_id}'
                .replace('{' + 'org_id' + '}', encodeURIComponent(String(orgId)))
                .replace('{' + 'team_id' + '}', encodeURIComponent(String(teamId)));
            let localVarQueryParameters = new URLSearchParams();
            let localVarHeaderParams: Record<string, string> = {}
            const produces = ['application/json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }

            // verify required parameter 'orgId' is not null or undefined
            if (orgId === null || orgId === undefined) {
                throw new Error('Required parameter orgId was null or undefined when calling enterpriseGetTeam.');
            }

            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new Error('Required parameter teamId was null or undefined when calling enterpriseGetTeam.');
            }



            const resource = new URL(localVarPath, basePath)
            resource.search = localVarQueryParameters.toString()


const options = {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${typeof accessToken === 'function' ? await accessToken() : accessToken}`
                },
            }

            if (typeof logger === 'function') logger('FETCH', resource.toString(), options)

            const response = await fetch(resource, options)

            if (typeof logger === 'function') logger('RESPONSE', response)

            let bodyAsJson: unknown
            try {
                bodyAsJson = await response.json()
            } catch (err) {
                // Body doesn't have valid json
            }

            if (typeof logger === 'function' && bodyAsJson) logger('BODY', bodyAsJson)

            if (!response.ok) {
                throw new HttpError(response, bodyAsJson, response.status)
            }

            const body = ObjectSerializer.deserialize(bodyAsJson, "Team");

            return({response, body})
        },

        /*
        */

        enterpriseGetTeams: async function (orgId: string, 
 query?: { 

limit?: number,
 


cursor?: string,
 


filterQuery?: string,
 },  
) : Promise<{ response: Response; body: Array<Team>;  }> {
            const localVarPath = '/v2/orgs/{org_id}/teams'
                .replace('{' + 'org_id' + '}', encodeURIComponent(String(orgId)));
            let localVarQueryParameters = new URLSearchParams();
            let localVarHeaderParams: Record<string, string> = {}
            const produces = ['application/json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }

            // verify required parameter 'orgId' is not null or undefined
            if (orgId === null || orgId === undefined) {
                throw new Error('Required parameter orgId was null or undefined when calling enterpriseGetTeams.');
            }




            if (query?.limit !== undefined) {
                localVarQueryParameters.append('limit', ObjectSerializer.serialize(query?.limit, "number"));
            }



            if (query?.cursor !== undefined) {
                localVarQueryParameters.append('cursor', ObjectSerializer.serialize(query?.cursor, "string"));
            }



            if (query?.filterQuery !== undefined) {
                localVarQueryParameters.append('filterQuery', ObjectSerializer.serialize(query?.filterQuery, "string"));
            }


            const resource = new URL(localVarPath, basePath)
            resource.search = localVarQueryParameters.toString()


const options = {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${typeof accessToken === 'function' ? await accessToken() : accessToken}`
                },
            }

            if (typeof logger === 'function') logger('FETCH', resource.toString(), options)

            const response = await fetch(resource, options)

            if (typeof logger === 'function') logger('RESPONSE', response)

            let bodyAsJson: unknown
            try {
                bodyAsJson = await response.json()
            } catch (err) {
                // Body doesn't have valid json
            }

            if (typeof logger === 'function' && bodyAsJson) logger('BODY', bodyAsJson)

            if (!response.ok) {
                throw new HttpError(response, bodyAsJson, response.status)
            }

            const body = ObjectSerializer.deserialize(bodyAsJson, "Array<Team>");

            return({response, body})
        },

        /*
        */

        enterpriseUpdateTeam: async function (orgId: string, teamId: string, teamChanges: TeamChanges, 
) : Promise<{ response: Response; body: Team;  }> {
            const localVarPath = '/v2/orgs/{org_id}/teams/{team_id}'
                .replace('{' + 'org_id' + '}', encodeURIComponent(String(orgId)))
                .replace('{' + 'team_id' + '}', encodeURIComponent(String(teamId)));
            let localVarQueryParameters = new URLSearchParams();
            let localVarHeaderParams: Record<string, string> = {}
            const produces = ['application/json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }

            // verify required parameter 'orgId' is not null or undefined
            if (orgId === null || orgId === undefined) {
                throw new Error('Required parameter orgId was null or undefined when calling enterpriseUpdateTeam.');
            }

            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new Error('Required parameter teamId was null or undefined when calling enterpriseUpdateTeam.');
            }



            const resource = new URL(localVarPath, basePath)
            resource.search = localVarQueryParameters.toString()


const options = {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${typeof accessToken === 'function' ? await accessToken() : accessToken}`
                },
                body: JSON.stringify(ObjectSerializer.serialize(teamChanges, "TeamChanges"))
            }

            if (typeof logger === 'function') logger('FETCH', resource.toString(), options)

            const response = await fetch(resource, options)

            if (typeof logger === 'function') logger('RESPONSE', response)

            let bodyAsJson: unknown
            try {
                bodyAsJson = await response.json()
            } catch (err) {
                // Body doesn't have valid json
            }

            if (typeof logger === 'function' && bodyAsJson) logger('BODY', bodyAsJson)

            if (!response.ok) {
                throw new HttpError(response, bodyAsJson, response.status)
            }

            const body = ObjectSerializer.deserialize(bodyAsJson, "Team");

            return({response, body})
        },
    }
}
