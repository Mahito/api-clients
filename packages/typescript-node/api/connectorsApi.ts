/**
 * Miro API
 * Miro API
 *
 * The version of the OpenAPI document: 0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

import fetch, {Response} from 'node-fetch'
import * as http from 'http'

/* tslint:disable:no-unused-locals */
import {ConnectorChangesData} from '../model/connectorChangesData'
import {ConnectorCreationData} from '../model/connectorCreationData'
import {ConnectorWithLinks} from '../model/connectorWithLinks'
import {ConnectorsCursorPaged} from '../model/connectorsCursorPaged'
import {GetBoards400Response} from '../model/getBoards400Response'

import {ObjectSerializer} from '../model/models'

import {HttpError, makeJsonRequest} from './apis'

let defaultBasePath = 'https://api.miro.com'

export interface ConnectorsApiMethods {
  /**
   * Adds a connector to a board.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">boards:write</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 2</a><br/>
   * @summary Create connector
   * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) for which you want to create the connector.
   * @param connectorCreationData
   */
  createConnector(
    boardId: string,
    connectorCreationData: ConnectorCreationData,
  ): Promise<{response: Response; body: ConnectorWithLinks}>
  /**
   * Deletes the specified connector from the board.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">boards:write</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 3</a><br/>
   * @summary Delete connector
   * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) from which you want to delete the connector.
   * @param connectorId [Unique identifier (ID) of the connector](https://developers.miro.com/reference/rest-api-connector-model) that you want to delete.
   */
  deleteConnector(boardId: string, connectorId: string): Promise<{response: Response; body: object}>
  /**
   * Retrieves information for a specific connector on a board.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">boards:read</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 1</a><br/>
   * @summary Get specific connector
   * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) from which you want to retrieve a specific connector.
   * @param connectorId [Unique identifier (ID) of the connector](https://developers.miro.com/reference/rest-api-connector-model) that you want to retrieve.
   */
  getConnector(boardId: string, connectorId: string): Promise<{response: Response; body: ConnectorWithLinks}>
  /**
   * Retrieves a list of connectors for a specific board.  This method returns results using a cursor-based approach. A cursor-paginated method returns a portion of the total set of results based on the limit specified and a cursor that points to the next portion of the results. To retrieve the next portion of the collection, on your next call to the same method, set the `cursor` parameter equal to the `cursor` value you received in the response of the previous request. For example, if you set the `limit` query parameter to `10` and the board contains 20 objects, the first call will return information about the first 10 objects in the response along with a cursor parameter and value. In this example, let\'s say the cursor parameter value returned in the response is `foo`. If you want to retrieve the next set of objects, on your next call to the same method, set the cursor parameter value to `foo`.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">boards:read</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 2</a><br/>
   * @summary Get connectors
   * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) from which you want to retrieve a list of connectors.
   * @param limit
   * @param cursor
   */
  getConnectors(
    boardId: string,
    query?: {
      limit?: string

      cursor?: string
    },
  ): Promise<{response: Response; body: ConnectorsCursorPaged}>
  /**
   * Updates a connector on a board based on the data and style properties provided in the request body.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">boards:write</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 2</a><br/>
   * @summary Update connector
   * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) for which you want to update the connector.
   * @param connectorId [Unique identifier (ID) of the connector](https://developers.miro.com/reference/rest-api-connector-model) that you want to update.
   * @param connectorChangesData
   */
  updateConnector(
    boardId: string,
    connectorId: string,
    connectorChangesData: ConnectorChangesData,
  ): Promise<{response: Response; body: ConnectorWithLinks}>
}

export function ConnectorsApi(
  accessToken: string | (() => Promise<string>),
  basePath: string = defaultBasePath,
  logger?: (...thing: any) => void,
): ConnectorsApiMethods {
  return {
    /*
     */

    createConnector: async function (
      boardId: string,
      connectorCreationData: ConnectorCreationData,
    ): Promise<{response: Response; body: ConnectorWithLinks}> {
      const localVarPath = '/v2-experimental/boards/{board_id}/connectors'.replace(
        '{' + 'board_id' + '}',
        encodeURIComponent(String(boardId)),
      )
      let localVarQueryParameters = new URLSearchParams()
      // verify required parameter 'boardId' is not null or undefined
      if (boardId === null || boardId === undefined) {
        throw new Error('Required parameter boardId was null or undefined when calling createConnector.')
      }

      const resource = new URL(localVarPath, basePath)
      resource.search = localVarQueryParameters.toString()

      const {response, bodyAsJson} = await makeJsonRequest(
        typeof accessToken === 'function' ? await accessToken() : accessToken,
        'POST',
        resource,
        JSON.stringify(ObjectSerializer.serialize(connectorCreationData, 'ConnectorCreationData')),

        logger,
      )

      const body = ObjectSerializer.deserialize(bodyAsJson, 'ConnectorWithLinks')

      return {response, body}
    },

    /*
     */

    deleteConnector: async function (
      boardId: string,
      connectorId: string,
    ): Promise<{response: Response; body: object}> {
      const localVarPath = '/v2-experimental/boards/{board_id}/connectors/{connector_id}'
        .replace('{' + 'board_id' + '}', encodeURIComponent(String(boardId)))
        .replace('{' + 'connector_id' + '}', encodeURIComponent(String(connectorId)))
      let localVarQueryParameters = new URLSearchParams()
      // verify required parameter 'boardId' is not null or undefined
      if (boardId === null || boardId === undefined) {
        throw new Error('Required parameter boardId was null or undefined when calling deleteConnector.')
      }
      // verify required parameter 'connectorId' is not null or undefined
      if (connectorId === null || connectorId === undefined) {
        throw new Error('Required parameter connectorId was null or undefined when calling deleteConnector.')
      }

      const resource = new URL(localVarPath, basePath)
      resource.search = localVarQueryParameters.toString()

      const {response, bodyAsJson} = await makeJsonRequest(
        typeof accessToken === 'function' ? await accessToken() : accessToken,
        'DELETE',
        resource,
        undefined,

        logger,
      )

      const body = ObjectSerializer.deserialize(bodyAsJson, 'object')

      return {response, body}
    },

    /*
     */

    getConnector: async function (
      boardId: string,
      connectorId: string,
    ): Promise<{response: Response; body: ConnectorWithLinks}> {
      const localVarPath = '/v2-experimental/boards/{board_id}/connectors/{connector_id}'
        .replace('{' + 'board_id' + '}', encodeURIComponent(String(boardId)))
        .replace('{' + 'connector_id' + '}', encodeURIComponent(String(connectorId)))
      let localVarQueryParameters = new URLSearchParams()
      // verify required parameter 'boardId' is not null or undefined
      if (boardId === null || boardId === undefined) {
        throw new Error('Required parameter boardId was null or undefined when calling getConnector.')
      }
      // verify required parameter 'connectorId' is not null or undefined
      if (connectorId === null || connectorId === undefined) {
        throw new Error('Required parameter connectorId was null or undefined when calling getConnector.')
      }

      const resource = new URL(localVarPath, basePath)
      resource.search = localVarQueryParameters.toString()

      const {response, bodyAsJson} = await makeJsonRequest(
        typeof accessToken === 'function' ? await accessToken() : accessToken,
        'GET',
        resource,
        undefined,

        logger,
      )

      const body = ObjectSerializer.deserialize(bodyAsJson, 'ConnectorWithLinks')

      return {response, body}
    },

    /*
     */

    getConnectors: async function (
      boardId: string,
      query?: {
        limit?: string

        cursor?: string
      },
    ): Promise<{response: Response; body: ConnectorsCursorPaged}> {
      const localVarPath = '/v2-experimental/boards/{board_id}/connectors'.replace(
        '{' + 'board_id' + '}',
        encodeURIComponent(String(boardId)),
      )
      let localVarQueryParameters = new URLSearchParams()
      // verify required parameter 'boardId' is not null or undefined
      if (boardId === null || boardId === undefined) {
        throw new Error('Required parameter boardId was null or undefined when calling getConnectors.')
      }

      if (query?.limit !== undefined) {
        localVarQueryParameters.append('limit', ObjectSerializer.serialize(query?.limit, 'string'))
      }

      if (query?.cursor !== undefined) {
        localVarQueryParameters.append('cursor', ObjectSerializer.serialize(query?.cursor, 'string'))
      }

      const resource = new URL(localVarPath, basePath)
      resource.search = localVarQueryParameters.toString()

      const {response, bodyAsJson} = await makeJsonRequest(
        typeof accessToken === 'function' ? await accessToken() : accessToken,
        'GET',
        resource,
        undefined,

        logger,
      )

      const body = ObjectSerializer.deserialize(bodyAsJson, 'ConnectorsCursorPaged')

      return {response, body}
    },

    /*
     */

    updateConnector: async function (
      boardId: string,
      connectorId: string,
      connectorChangesData: ConnectorChangesData,
    ): Promise<{response: Response; body: ConnectorWithLinks}> {
      const localVarPath = '/v2-experimental/boards/{board_id}/connectors/{connector_id}'
        .replace('{' + 'board_id' + '}', encodeURIComponent(String(boardId)))
        .replace('{' + 'connector_id' + '}', encodeURIComponent(String(connectorId)))
      let localVarQueryParameters = new URLSearchParams()
      // verify required parameter 'boardId' is not null or undefined
      if (boardId === null || boardId === undefined) {
        throw new Error('Required parameter boardId was null or undefined when calling updateConnector.')
      }
      // verify required parameter 'connectorId' is not null or undefined
      if (connectorId === null || connectorId === undefined) {
        throw new Error('Required parameter connectorId was null or undefined when calling updateConnector.')
      }

      const resource = new URL(localVarPath, basePath)
      resource.search = localVarQueryParameters.toString()

      const {response, bodyAsJson} = await makeJsonRequest(
        typeof accessToken === 'function' ? await accessToken() : accessToken,
        'PATCH',
        resource,
        JSON.stringify(ObjectSerializer.serialize(connectorChangesData, 'ConnectorChangesData')),

        logger,
      )

      const body = ObjectSerializer.deserialize(bodyAsJson, 'ConnectorWithLinks')

      return {response, body}
    },
  }
}
