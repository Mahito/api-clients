/**
 * Miro API
 * Miro API
 *
 * The version of the OpenAPI document: 0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

import fetch, {Response} from 'node-fetch'
import * as http from 'http'

/* tslint:disable:no-unused-locals */
import {GetBoards400Response} from '../model/getBoards400Response'
import {ShapeCreateRequest} from '../model/shapeCreateRequest'
import {ShapeItem} from '../model/shapeItem'
import {ShapeUpdateRequest} from '../model/shapeUpdateRequest'

import {ObjectSerializer} from '../model/models'

import {HttpError, makeJsonRequest} from './apis'

let defaultBasePath = 'https://api.miro.com'

export interface ShapesApiMethods {
  /**
   * Adds a shape item to a board.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">boards:write</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 2</a><br/>
   * @summary Create shape item
   * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) where you want to create the item.
   * @param shapeCreateRequest
   */
  createShapeItem(
    boardId: string,
    shapeCreateRequest: ShapeCreateRequest,
  ): Promise<{response: Response; body: ShapeItem}>
  /**
   * Deletes a shape item from the board.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">boards:write</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 3</a><br/>
   * @summary Delete shape item
   * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) from which you want to delete the item.
   * @param itemId [Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to delete.
   */
  deleteShapeItem(boardId: string, itemId: string): Promise<{response: Response; body: object}>
  /**
   * Retrieves information for a specific shape item on a board.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">boards:read</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 1</a><br/>
   * @summary Get shape item
   * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) from which you want to retrieve a specific item.
   * @param itemId [Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to retrieve.
   */
  getShapeItem(boardId: string, itemId: string): Promise<{response: Response; body: ShapeItem}>
  /**
   * Updates a shape item on a board based on the data and style properties provided in the request body.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">boards:write</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 2</a><br/>
   * @summary Update shape item
   * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) where you want to update the item.
   * @param itemId [Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to update.
   * @param shapeUpdateRequest
   */
  updateShapeItem(
    boardId: string,
    itemId: string,
    shapeUpdateRequest: ShapeUpdateRequest,
  ): Promise<{response: Response; body: ShapeItem}>
}

export function ShapesApi(
  accessToken: string | (() => Promise<string>),
  basePath: string = defaultBasePath,
  logger?: (...thing: any) => void,
): ShapesApiMethods {
  return {
    /*
     */

    createShapeItem: async function (
      boardId: string,
      shapeCreateRequest: ShapeCreateRequest,
    ): Promise<{response: Response; body: ShapeItem}> {
      const localVarPath = '/v2/boards/{board_id}/shapes'.replace(
        '{' + 'board_id' + '}',
        encodeURIComponent(String(boardId)),
      )
      let localVarQueryParameters = new URLSearchParams()
      // verify required parameter 'boardId' is not null or undefined
      if (boardId === null || boardId === undefined) {
        throw new Error('Required parameter boardId was null or undefined when calling createShapeItem.')
      }

      const resource = new URL(localVarPath, basePath)
      resource.search = localVarQueryParameters.toString()

      const {response, bodyAsJson} = await makeJsonRequest(
        typeof accessToken === 'function' ? await accessToken() : accessToken,
        'POST',
        resource,
        JSON.stringify(ObjectSerializer.serialize(shapeCreateRequest, 'ShapeCreateRequest')),

        logger,
      )

      const body = ObjectSerializer.deserialize(bodyAsJson, 'ShapeItem')

      return {response, body}
    },

    /*
     */

    deleteShapeItem: async function (boardId: string, itemId: string): Promise<{response: Response; body: object}> {
      const localVarPath = '/v2/boards/{board_id}/shapes/{item_id}'
        .replace('{' + 'board_id' + '}', encodeURIComponent(String(boardId)))
        .replace('{' + 'item_id' + '}', encodeURIComponent(String(itemId)))
      let localVarQueryParameters = new URLSearchParams()
      // verify required parameter 'boardId' is not null or undefined
      if (boardId === null || boardId === undefined) {
        throw new Error('Required parameter boardId was null or undefined when calling deleteShapeItem.')
      }
      // verify required parameter 'itemId' is not null or undefined
      if (itemId === null || itemId === undefined) {
        throw new Error('Required parameter itemId was null or undefined when calling deleteShapeItem.')
      }

      const resource = new URL(localVarPath, basePath)
      resource.search = localVarQueryParameters.toString()

      const {response, bodyAsJson} = await makeJsonRequest(
        typeof accessToken === 'function' ? await accessToken() : accessToken,
        'DELETE',
        resource,
        undefined,

        logger,
      )

      const body = ObjectSerializer.deserialize(bodyAsJson, 'object')

      return {response, body}
    },

    /*
     */

    getShapeItem: async function (boardId: string, itemId: string): Promise<{response: Response; body: ShapeItem}> {
      const localVarPath = '/v2/boards/{board_id}/shapes/{item_id}'
        .replace('{' + 'board_id' + '}', encodeURIComponent(String(boardId)))
        .replace('{' + 'item_id' + '}', encodeURIComponent(String(itemId)))
      let localVarQueryParameters = new URLSearchParams()
      // verify required parameter 'boardId' is not null or undefined
      if (boardId === null || boardId === undefined) {
        throw new Error('Required parameter boardId was null or undefined when calling getShapeItem.')
      }
      // verify required parameter 'itemId' is not null or undefined
      if (itemId === null || itemId === undefined) {
        throw new Error('Required parameter itemId was null or undefined when calling getShapeItem.')
      }

      const resource = new URL(localVarPath, basePath)
      resource.search = localVarQueryParameters.toString()

      const {response, bodyAsJson} = await makeJsonRequest(
        typeof accessToken === 'function' ? await accessToken() : accessToken,
        'GET',
        resource,
        undefined,

        logger,
      )

      const body = ObjectSerializer.deserialize(bodyAsJson, 'ShapeItem')

      return {response, body}
    },

    /*
     */

    updateShapeItem: async function (
      boardId: string,
      itemId: string,
      shapeUpdateRequest: ShapeUpdateRequest,
    ): Promise<{response: Response; body: ShapeItem}> {
      const localVarPath = '/v2/boards/{board_id}/shapes/{item_id}'
        .replace('{' + 'board_id' + '}', encodeURIComponent(String(boardId)))
        .replace('{' + 'item_id' + '}', encodeURIComponent(String(itemId)))
      let localVarQueryParameters = new URLSearchParams()
      // verify required parameter 'boardId' is not null or undefined
      if (boardId === null || boardId === undefined) {
        throw new Error('Required parameter boardId was null or undefined when calling updateShapeItem.')
      }
      // verify required parameter 'itemId' is not null or undefined
      if (itemId === null || itemId === undefined) {
        throw new Error('Required parameter itemId was null or undefined when calling updateShapeItem.')
      }

      const resource = new URL(localVarPath, basePath)
      resource.search = localVarQueryParameters.toString()

      const {response, bodyAsJson} = await makeJsonRequest(
        typeof accessToken === 'function' ? await accessToken() : accessToken,
        'PATCH',
        resource,
        JSON.stringify(ObjectSerializer.serialize(shapeUpdateRequest, 'ShapeUpdateRequest')),

        logger,
      )

      const body = ObjectSerializer.deserialize(bodyAsJson, 'ShapeItem')

      return {response, body}
    },
  }
}
