/**
 * Miro API
 * Miro API
 *
 * The version of the OpenAPI document: 0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

import fetch, {Response} from 'node-fetch'
import * as http from 'http'

/* tslint:disable:no-unused-locals */
import {EnterpriseGetOrganizationMembers200Response} from '../model/enterpriseGetOrganizationMembers200Response'
import {Organization} from '../model/organization'
import {OrganizationMember} from '../model/organizationMember'
import {OrganizationMembersSearchQuery} from '../model/organizationMembersSearchQuery'

import {ObjectSerializer} from '../model/models'

import {HttpError, makeJsonRequest} from './apis'

let defaultBasePath = 'https://api.miro.com'

export interface OrganizationsApiMethods {
  /**
   * Retrieves organization information.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">organizations:read</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 3</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=\"blank\" href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
   * @summary Get organization info
   * @param orgId id of the organization
   */
  enterpriseGetOrganization(orgId: string): Promise<{response: Response; body: Organization}>
  /**
   * Retrieves organization member information for an existing organization.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">organizations:read</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 3</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=\"blank\" href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
   * @summary Get organization member
   * @param orgId id of the organization
   * @param memberId id of the organization member
   */
  enterpriseGetOrganizationMember(
    orgId: string,
    memberId: string,
  ): Promise<{response: Response; body: OrganizationMember}>
  /**
   * Retrieves organization members based on the organization ID and the cursor, or based on the user emails provided in the request.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">organizations:read</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 3</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=\"blank\" href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
   * @summary Get organization members
   * @param orgId id of the organization
   * @param query query to be used for organization members retrieval
   */
  enterpriseGetOrganizationMembers(
    orgId: string,
    query: OrganizationMembersSearchQuery,
  ): Promise<{response: Response; body: EnterpriseGetOrganizationMembers200Response}>
}

export function OrganizationsApi(
  accessToken: string | (() => Promise<string>),
  basePath: string = defaultBasePath,
  logger?: (...thing: any) => void,
): OrganizationsApiMethods {
  return {
    /*
     */

    enterpriseGetOrganization: async function (orgId: string): Promise<{response: Response; body: Organization}> {
      const localVarPath = '/v2/orgs/{org_id}'.replace('{' + 'org_id' + '}', encodeURIComponent(String(orgId)))
      let localVarQueryParameters = new URLSearchParams()
      // verify required parameter 'orgId' is not null or undefined
      if (orgId === null || orgId === undefined) {
        throw new Error('Required parameter orgId was null or undefined when calling enterpriseGetOrganization.')
      }

      const resource = new URL(localVarPath, basePath)
      resource.search = localVarQueryParameters.toString()

      const {response, bodyAsJson} = await makeJsonRequest(
        typeof accessToken === 'function' ? await accessToken() : accessToken,
        'GET',
        resource,
        undefined,

        logger,
      )

      const body = ObjectSerializer.deserialize(bodyAsJson, 'Organization')

      return {response, body}
    },

    /*
     */

    enterpriseGetOrganizationMember: async function (
      orgId: string,
      memberId: string,
    ): Promise<{response: Response; body: OrganizationMember}> {
      const localVarPath = '/v2/orgs/{org_id}/members/{member_id}'
        .replace('{' + 'org_id' + '}', encodeURIComponent(String(orgId)))
        .replace('{' + 'member_id' + '}', encodeURIComponent(String(memberId)))
      let localVarQueryParameters = new URLSearchParams()
      // verify required parameter 'orgId' is not null or undefined
      if (orgId === null || orgId === undefined) {
        throw new Error('Required parameter orgId was null or undefined when calling enterpriseGetOrganizationMember.')
      }
      // verify required parameter 'memberId' is not null or undefined
      if (memberId === null || memberId === undefined) {
        throw new Error(
          'Required parameter memberId was null or undefined when calling enterpriseGetOrganizationMember.',
        )
      }

      const resource = new URL(localVarPath, basePath)
      resource.search = localVarQueryParameters.toString()

      const {response, bodyAsJson} = await makeJsonRequest(
        typeof accessToken === 'function' ? await accessToken() : accessToken,
        'GET',
        resource,
        undefined,

        logger,
      )

      const body = ObjectSerializer.deserialize(bodyAsJson, 'OrganizationMember')

      return {response, body}
    },

    /*
     */

    enterpriseGetOrganizationMembers: async function (
      orgId: string,
      query: OrganizationMembersSearchQuery,
    ): Promise<{response: Response; body: EnterpriseGetOrganizationMembers200Response}> {
      const localVarPath = '/v2/orgs/{org_id}/members'.replace('{' + 'org_id' + '}', encodeURIComponent(String(orgId)))
      let localVarQueryParameters = new URLSearchParams()
      // verify required parameter 'orgId' is not null or undefined
      if (orgId === null || orgId === undefined) {
        throw new Error('Required parameter orgId was null or undefined when calling enterpriseGetOrganizationMembers.')
      }

      // verify required parameter 'query' is not null or undefined
      if (query === null || query === undefined) {
        throw new Error('Required parameter query was null or undefined when calling enterpriseGetOrganizationMembers.')
      }

      if (query !== undefined) {
        localVarQueryParameters.append('query', ObjectSerializer.serialize(query, 'OrganizationMembersSearchQuery'))
      }

      const resource = new URL(localVarPath, basePath)
      resource.search = localVarQueryParameters.toString()

      const {response, bodyAsJson} = await makeJsonRequest(
        typeof accessToken === 'function' ? await accessToken() : accessToken,
        'GET',
        resource,
        undefined,

        logger,
      )

      const body = ObjectSerializer.deserialize(bodyAsJson, 'EnterpriseGetOrganizationMembers200Response')

      return {response, body}
    },
  }
}
