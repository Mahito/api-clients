/**
 * Miro API
 * Miro API
 *
 * The version of the OpenAPI document: 0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

import fetch, {Response} from 'node-fetch'
import * as http from 'http'

/* tslint:disable:no-unused-locals */
import {GenericItem} from '../model/genericItem'
import {GenericItemCursorPaged} from '../model/genericItemCursorPaged'
import {GenericItemUpdate} from '../model/genericItemUpdate'
import {GetBoards400Response} from '../model/getBoards400Response'

import {ObjectSerializer} from '../model/models'

import {HttpError, makeJsonRequest} from './apis'

let defaultBasePath = 'https://api.miro.com'

export interface ItemsApiMethods {
  /**
   * Deletes an item from a board.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">boards:write</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 3</a><br/>
   * @summary Delete item
   * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) from which you want to delete the item.
   * @param itemId [Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to delete.
   */
  deleteItem(boardId: string, itemId: string): Promise<{response: Response; body: object}>
  /**
   * Retrieves a list of items for a specific board. You can retrieve all items on the board, a list of child items inside a parent item, or a list of specific types of items by specifying URL query parameter values.  This method returns results using a cursor-based approach. A cursor-paginated method returns a portion of the total set of results based on the limit specified and a cursor that points to the next portion of the results. To retrieve the next portion of the collection, on your next call to the same method, set the `cursor` parameter equal to the `cursor` value you received in the response of the previous request. For example, if you set the `limit` query parameter to `10` and the board contains 20 objects, the first call will return information about the first 10 objects in the response along with a cursor parameter and value. In this example, let\'s say the cursor parameter value returned in the response is `foo`. If you want to retrieve the next set of objects, on your next call to the same method, set the cursor parameter value to `foo`.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">boards:read</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 2</a><br/>
   * @summary Get items on board
   * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) for which you want to retrieve the list of available items.
   * @param limit
   * @param type
   * @param cursor
   */
  getItems(
    boardId: string,
    query?: {
      limit?: string

      type?: string

      cursor?: string
    },
  ): Promise<{response: Response; body: GenericItemCursorPaged}>
  /**
   * Retrieves a list of items within a specific frame. A frame is a parent item and all items within a frame are child items. This method returns results using a cursor-based approach. A cursor-paginated method returns a portion of the total set of results based on the limit specified and a cursor that points to the next portion of the results. To retrieve the next portion of the collection, on your next call to the same method, set the `cursor` parameter equal to the `cursor` value you received in the response of the previous request. For example, if you set the `limit` query parameter to `10` and the board contains 20 objects, the first call will return information about the first 10 objects in the response along with a cursor parameter and value. In this example, let\'s say the cursor parameter value returned in the response is `foo`. If you want to retrieve the next set of objects, on your next call to the same method, set the cursor parameter value to `foo`.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">boards:read</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 2</a><br/>
   * @summary Get items within frame
   * @param boardIdPlatformContainers [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) that contains the frame for which you want to retrieve the list of available items.
   * @param parentItemId ID of the frame for which you want to retrieve the list of available items.
   * @param limit
   * @param type
   * @param cursor
   */
  getItemsWithinFrame(
    boardIdPlatformContainers: string,
    parentItemId: string,
    query?: {
      limit?: string

      type?: string

      cursor?: string
    },
  ): Promise<{response: Response; body: GenericItemCursorPaged}>
  /**
   * Retrieves information for a specific item on a board.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">boards:read</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 1</a><br/>
   * @summary Get specific item on board
   * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) from which you want to retrieve a specific item.
   * @param itemId [Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to retrieve.
   */
  getSpecificItem(boardId: string, itemId: string): Promise<{response: Response; body: GenericItem}>
  /**
   * Updates the position or the parent of an item on a board.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">boards:write</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 2</a><br/>
   * @summary Update item position or parent
   * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) where you want to update the item.
   * @param itemId [Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to update.
   * @param genericItemUpdate
   */
  updateItemPositionOrParent(
    boardId: string,
    itemId: string,
    genericItemUpdate: GenericItemUpdate,
  ): Promise<{response: Response; body: GenericItem}>
}

export function ItemsApi(
  accessToken: string | (() => Promise<string>),
  basePath: string = defaultBasePath,
  logger?: (...thing: any) => void,
): ItemsApiMethods {
  return {
    /*
     */

    deleteItem: async function (boardId: string, itemId: string): Promise<{response: Response; body: object}> {
      const localVarPath = '/v2/boards/{board_id}/items/{item_id}'
        .replace('{' + 'board_id' + '}', encodeURIComponent(String(boardId)))
        .replace('{' + 'item_id' + '}', encodeURIComponent(String(itemId)))
      let localVarQueryParameters = new URLSearchParams()
      // verify required parameter 'boardId' is not null or undefined
      if (boardId === null || boardId === undefined) {
        throw new Error('Required parameter boardId was null or undefined when calling deleteItem.')
      }
      // verify required parameter 'itemId' is not null or undefined
      if (itemId === null || itemId === undefined) {
        throw new Error('Required parameter itemId was null or undefined when calling deleteItem.')
      }

      const resource = new URL(localVarPath, basePath)
      resource.search = localVarQueryParameters.toString()

      const {response, bodyAsJson} = await makeJsonRequest(
        typeof accessToken === 'function' ? await accessToken() : accessToken,
        'DELETE',
        resource,
        undefined,

        logger,
      )

      const body = ObjectSerializer.deserialize(bodyAsJson, 'object')

      return {response, body}
    },

    /*
     */

    getItems: async function (
      boardId: string,
      query?: {
        limit?: string

        type?: string

        cursor?: string
      },
    ): Promise<{response: Response; body: GenericItemCursorPaged}> {
      const localVarPath = '/v2/boards/{board_id}/items'.replace(
        '{' + 'board_id' + '}',
        encodeURIComponent(String(boardId)),
      )
      let localVarQueryParameters = new URLSearchParams()
      // verify required parameter 'boardId' is not null or undefined
      if (boardId === null || boardId === undefined) {
        throw new Error('Required parameter boardId was null or undefined when calling getItems.')
      }

      if (query?.limit !== undefined) {
        localVarQueryParameters.append('limit', ObjectSerializer.serialize(query?.limit, 'string'))
      }

      if (query?.type !== undefined) {
        localVarQueryParameters.append('type', ObjectSerializer.serialize(query?.type, 'string'))
      }

      if (query?.cursor !== undefined) {
        localVarQueryParameters.append('cursor', ObjectSerializer.serialize(query?.cursor, 'string'))
      }

      const resource = new URL(localVarPath, basePath)
      resource.search = localVarQueryParameters.toString()

      const {response, bodyAsJson} = await makeJsonRequest(
        typeof accessToken === 'function' ? await accessToken() : accessToken,
        'GET',
        resource,
        undefined,

        logger,
      )

      const body = ObjectSerializer.deserialize(bodyAsJson, 'GenericItemCursorPaged')

      return {response, body}
    },

    /*
     */

    getItemsWithinFrame: async function (
      boardIdPlatformContainers: string,
      parentItemId: string,
      query?: {
        limit?: string

        type?: string

        cursor?: string
      },
    ): Promise<{response: Response; body: GenericItemCursorPaged}> {
      const localVarPath = '/v2/boards/{board_id_PlatformContainers}/items'.replace(
        '{' + 'board_id_PlatformContainers' + '}',
        encodeURIComponent(String(boardIdPlatformContainers)),
      )
      let localVarQueryParameters = new URLSearchParams()
      // verify required parameter 'boardIdPlatformContainers' is not null or undefined
      if (boardIdPlatformContainers === null || boardIdPlatformContainers === undefined) {
        throw new Error(
          'Required parameter boardIdPlatformContainers was null or undefined when calling getItemsWithinFrame.',
        )
      }

      // verify required parameter 'parentItemId' is not null or undefined
      if (parentItemId === null || parentItemId === undefined) {
        throw new Error('Required parameter parentItemId was null or undefined when calling getItemsWithinFrame.')
      }

      if (parentItemId !== undefined) {
        localVarQueryParameters.append('parent_item_id', ObjectSerializer.serialize(parentItemId, 'string'))
      }

      if (query?.limit !== undefined) {
        localVarQueryParameters.append('limit', ObjectSerializer.serialize(query?.limit, 'string'))
      }

      if (query?.type !== undefined) {
        localVarQueryParameters.append('type', ObjectSerializer.serialize(query?.type, 'string'))
      }

      if (query?.cursor !== undefined) {
        localVarQueryParameters.append('cursor', ObjectSerializer.serialize(query?.cursor, 'string'))
      }

      const resource = new URL(localVarPath, basePath)
      resource.search = localVarQueryParameters.toString()

      const {response, bodyAsJson} = await makeJsonRequest(
        typeof accessToken === 'function' ? await accessToken() : accessToken,
        'GET',
        resource,
        undefined,

        logger,
      )

      const body = ObjectSerializer.deserialize(bodyAsJson, 'GenericItemCursorPaged')

      return {response, body}
    },

    /*
     */

    getSpecificItem: async function (
      boardId: string,
      itemId: string,
    ): Promise<{response: Response; body: GenericItem}> {
      const localVarPath = '/v2/boards/{board_id}/items/{item_id}'
        .replace('{' + 'board_id' + '}', encodeURIComponent(String(boardId)))
        .replace('{' + 'item_id' + '}', encodeURIComponent(String(itemId)))
      let localVarQueryParameters = new URLSearchParams()
      // verify required parameter 'boardId' is not null or undefined
      if (boardId === null || boardId === undefined) {
        throw new Error('Required parameter boardId was null or undefined when calling getSpecificItem.')
      }
      // verify required parameter 'itemId' is not null or undefined
      if (itemId === null || itemId === undefined) {
        throw new Error('Required parameter itemId was null or undefined when calling getSpecificItem.')
      }

      const resource = new URL(localVarPath, basePath)
      resource.search = localVarQueryParameters.toString()

      const {response, bodyAsJson} = await makeJsonRequest(
        typeof accessToken === 'function' ? await accessToken() : accessToken,
        'GET',
        resource,
        undefined,

        logger,
      )

      const body = ObjectSerializer.deserialize(bodyAsJson, 'GenericItem')

      return {response, body}
    },

    /*
     */

    updateItemPositionOrParent: async function (
      boardId: string,
      itemId: string,
      genericItemUpdate: GenericItemUpdate,
    ): Promise<{response: Response; body: GenericItem}> {
      const localVarPath = '/v2/boards/{board_id}/items/{item_id}'
        .replace('{' + 'board_id' + '}', encodeURIComponent(String(boardId)))
        .replace('{' + 'item_id' + '}', encodeURIComponent(String(itemId)))
      let localVarQueryParameters = new URLSearchParams()
      // verify required parameter 'boardId' is not null or undefined
      if (boardId === null || boardId === undefined) {
        throw new Error('Required parameter boardId was null or undefined when calling updateItemPositionOrParent.')
      }
      // verify required parameter 'itemId' is not null or undefined
      if (itemId === null || itemId === undefined) {
        throw new Error('Required parameter itemId was null or undefined when calling updateItemPositionOrParent.')
      }

      const resource = new URL(localVarPath, basePath)
      resource.search = localVarQueryParameters.toString()

      const {response, bodyAsJson} = await makeJsonRequest(
        typeof accessToken === 'function' ? await accessToken() : accessToken,
        'PATCH',
        resource,
        JSON.stringify(ObjectSerializer.serialize(genericItemUpdate, 'GenericItemUpdate')),

        logger,
      )

      const body = ObjectSerializer.deserialize(bodyAsJson, 'GenericItem')

      return {response, body}
    },
  }
}
