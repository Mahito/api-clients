/**
 * Miro API
 * Miro API
 *
 * The version of the OpenAPI document: 0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

import fetch, {Response} from 'node-fetch'
import * as http from 'http'

/* tslint:disable:no-unused-locals */
import {DataClassificationTeamSettings} from '../model/dataClassificationTeamSettings'
import {UpdateBoardsDataClassificationLabel} from '../model/updateBoardsDataClassificationLabel'
import {UpdateBoardsDataClassificationLabelRequest} from '../model/updateBoardsDataClassificationLabelRequest'
import {UpdateTeamSettingsRequest} from '../model/updateTeamSettingsRequest'

import {ObjectSerializer} from '../model/models'

import {HttpError, makeJsonRequest} from './apis'

let defaultBasePath = 'https://api.miro.com'

export interface BoardClassificationTeamLevelApiMethods {
  /**
   * Updates board classification for not-classified only or all boards in an existing team.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">boards:write</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 4</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=\"blank\" href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
   * @summary Bulk update boards classification
   * @param orgId id of the organization
   * @param teamId id of the team
   * @param updateBoardsDataClassificationLabelRequest
   */
  enterpriseDataclassificationTeamBoardsBulk(
    orgId: string,
    teamId: string,
    updateBoardsDataClassificationLabelRequest: UpdateBoardsDataClassificationLabelRequest,
  ): Promise<{response: Response; body: UpdateBoardsDataClassificationLabel}>
  /**
   * Retrieves board classification settings for an existing team.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">organizations:teams:read</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 2</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=\"blank\" href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
   * @summary Get team settings
   * @param orgId id of the organization
   * @param teamId id of the team
   */
  enterpriseDataclassificationTeamSettingsGet(
    orgId: string,
    teamId: string,
  ): Promise<{response: Response; body: DataClassificationTeamSettings}>
  /**
   * Updates board classification settings for an existing team.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">organizations:teams:write</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 2</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=\"blank\" href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
   * @summary Update team settings
   * @param orgId id of the organization
   * @param teamId id of the team
   * @param updateTeamSettingsRequest
   */
  enterpriseDataclassificationTeamSettingsSet(
    orgId: string,
    teamId: string,
    updateTeamSettingsRequest: UpdateTeamSettingsRequest,
  ): Promise<{response: Response; body: DataClassificationTeamSettings}>
}

export function BoardClassificationTeamLevelApi(
  accessToken: string | (() => Promise<string>),
  basePath: string = defaultBasePath,
  logger?: (...thing: any) => void,
): BoardClassificationTeamLevelApiMethods {
  return {
    /*
     */

    enterpriseDataclassificationTeamBoardsBulk: async function (
      orgId: string,
      teamId: string,
      updateBoardsDataClassificationLabelRequest: UpdateBoardsDataClassificationLabelRequest,
    ): Promise<{response: Response; body: UpdateBoardsDataClassificationLabel}> {
      const localVarPath = '/v2/orgs/{org_id}/teams/{team_id}/data-classification'
        .replace('{' + 'org_id' + '}', encodeURIComponent(String(orgId)))
        .replace('{' + 'team_id' + '}', encodeURIComponent(String(teamId)))
      let localVarQueryParameters = new URLSearchParams()
      // verify required parameter 'orgId' is not null or undefined
      if (orgId === null || orgId === undefined) {
        throw new Error(
          'Required parameter orgId was null or undefined when calling enterpriseDataclassificationTeamBoardsBulk.',
        )
      }
      // verify required parameter 'teamId' is not null or undefined
      if (teamId === null || teamId === undefined) {
        throw new Error(
          'Required parameter teamId was null or undefined when calling enterpriseDataclassificationTeamBoardsBulk.',
        )
      }

      const resource = new URL(localVarPath, basePath)
      resource.search = localVarQueryParameters.toString()

      const {response, bodyAsJson} = await makeJsonRequest(
        typeof accessToken === 'function' ? await accessToken() : accessToken,
        'PATCH',
        resource,
        JSON.stringify(
          ObjectSerializer.serialize(
            updateBoardsDataClassificationLabelRequest,
            'UpdateBoardsDataClassificationLabelRequest',
          ),
        ),

        logger,
      )

      const body = ObjectSerializer.deserialize(bodyAsJson, 'UpdateBoardsDataClassificationLabel')

      return {response, body}
    },

    /*
     */

    enterpriseDataclassificationTeamSettingsGet: async function (
      orgId: string,
      teamId: string,
    ): Promise<{response: Response; body: DataClassificationTeamSettings}> {
      const localVarPath = '/v2/orgs/{org_id}/teams/{team_id}/data-classification-settings'
        .replace('{' + 'org_id' + '}', encodeURIComponent(String(orgId)))
        .replace('{' + 'team_id' + '}', encodeURIComponent(String(teamId)))
      let localVarQueryParameters = new URLSearchParams()
      // verify required parameter 'orgId' is not null or undefined
      if (orgId === null || orgId === undefined) {
        throw new Error(
          'Required parameter orgId was null or undefined when calling enterpriseDataclassificationTeamSettingsGet.',
        )
      }
      // verify required parameter 'teamId' is not null or undefined
      if (teamId === null || teamId === undefined) {
        throw new Error(
          'Required parameter teamId was null or undefined when calling enterpriseDataclassificationTeamSettingsGet.',
        )
      }

      const resource = new URL(localVarPath, basePath)
      resource.search = localVarQueryParameters.toString()

      const {response, bodyAsJson} = await makeJsonRequest(
        typeof accessToken === 'function' ? await accessToken() : accessToken,
        'GET',
        resource,
        undefined,

        logger,
      )

      const body = ObjectSerializer.deserialize(bodyAsJson, 'DataClassificationTeamSettings')

      return {response, body}
    },

    /*
     */

    enterpriseDataclassificationTeamSettingsSet: async function (
      orgId: string,
      teamId: string,
      updateTeamSettingsRequest: UpdateTeamSettingsRequest,
    ): Promise<{response: Response; body: DataClassificationTeamSettings}> {
      const localVarPath = '/v2/orgs/{org_id}/teams/{team_id}/data-classification-settings'
        .replace('{' + 'org_id' + '}', encodeURIComponent(String(orgId)))
        .replace('{' + 'team_id' + '}', encodeURIComponent(String(teamId)))
      let localVarQueryParameters = new URLSearchParams()
      // verify required parameter 'orgId' is not null or undefined
      if (orgId === null || orgId === undefined) {
        throw new Error(
          'Required parameter orgId was null or undefined when calling enterpriseDataclassificationTeamSettingsSet.',
        )
      }
      // verify required parameter 'teamId' is not null or undefined
      if (teamId === null || teamId === undefined) {
        throw new Error(
          'Required parameter teamId was null or undefined when calling enterpriseDataclassificationTeamSettingsSet.',
        )
      }

      const resource = new URL(localVarPath, basePath)
      resource.search = localVarQueryParameters.toString()

      const {response, bodyAsJson} = await makeJsonRequest(
        typeof accessToken === 'function' ? await accessToken() : accessToken,
        'PATCH',
        resource,
        JSON.stringify(ObjectSerializer.serialize(updateTeamSettingsRequest, 'UpdateTeamSettingsRequest')),

        logger,
      )

      const body = ObjectSerializer.deserialize(bodyAsJson, 'DataClassificationTeamSettings')

      return {response, body}
    },
  }
}
