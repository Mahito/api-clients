/**
 * Miro API
 * Miro API
 *
 * The version of the OpenAPI document: 0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

import fetch, {Response} from 'node-fetch'
import * as http from 'http'

/* tslint:disable:no-unused-locals */
import {TeamSettings} from '../model/teamSettings'
import {TeamSettingsChanges} from '../model/teamSettingsChanges'

import {ObjectSerializer} from '../model/models'

import {HttpError, makeJsonRequest} from './apis'

let defaultBasePath = 'https://api.miro.com'

export interface TeamSettingsApiApiMethods {
  /**
   * Retrieves default team settings of an existing organization.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">organizations:teams:read</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 1</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=\"blank\" href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
   * @summary Get default team settings
   * @param orgId The id of an Organization.
   */
  enterpriseGetDefaultTeamSettings(orgId: string): Promise<{response: Response; body: TeamSettings}>
  /**
   * Retrieves team settings of an existing team.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">organizations:teams:read</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 1</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=\"blank\" href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
   * @summary Get team settings
   * @param teamId The id of a Team.
   */
  enterpriseGetTeamSettings(teamId: string): Promise<{response: Response; body: TeamSettings}>
  /**
   * Updates team settings of an existing team.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">organizations:teams:write</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 2</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=\"blank\" href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
   * @summary Update team settings
   * @param teamId The id of a Team.
   * @param teamSettingsChanges
   */
  enterpriseUpdateTeamSettings(
    teamId: string,
    teamSettingsChanges: TeamSettingsChanges,
  ): Promise<{response: Response; body: TeamSettings}>
}

export function TeamSettingsApiApi(
  accessToken: string | (() => Promise<string>),
  basePath: string = defaultBasePath,
  logger?: (...thing: any) => void,
): TeamSettingsApiApiMethods {
  return {
    /*
     */

    enterpriseGetDefaultTeamSettings: async function (
      orgId: string,
    ): Promise<{response: Response; body: TeamSettings}> {
      const localVarPath = '/v2/orgs/{org_id}/default_teams_settings'.replace(
        '{' + 'org_id' + '}',
        encodeURIComponent(String(orgId)),
      )
      let localVarQueryParameters = new URLSearchParams()
      // verify required parameter 'orgId' is not null or undefined
      if (orgId === null || orgId === undefined) {
        throw new Error('Required parameter orgId was null or undefined when calling enterpriseGetDefaultTeamSettings.')
      }

      const resource = new URL(localVarPath, basePath)
      resource.search = localVarQueryParameters.toString()

      const {response, bodyAsJson} = await makeJsonRequest(
        typeof accessToken === 'function' ? await accessToken() : accessToken,
        'GET',
        resource,
        undefined,

        logger,
      )

      const body = ObjectSerializer.deserialize(bodyAsJson, 'TeamSettings')

      return {response, body}
    },

    /*
     */

    enterpriseGetTeamSettings: async function (teamId: string): Promise<{response: Response; body: TeamSettings}> {
      const localVarPath = '/v2/teams_settings/{team_id}'.replace(
        '{' + 'team_id' + '}',
        encodeURIComponent(String(teamId)),
      )
      let localVarQueryParameters = new URLSearchParams()
      // verify required parameter 'teamId' is not null or undefined
      if (teamId === null || teamId === undefined) {
        throw new Error('Required parameter teamId was null or undefined when calling enterpriseGetTeamSettings.')
      }

      const resource = new URL(localVarPath, basePath)
      resource.search = localVarQueryParameters.toString()

      const {response, bodyAsJson} = await makeJsonRequest(
        typeof accessToken === 'function' ? await accessToken() : accessToken,
        'GET',
        resource,
        undefined,

        logger,
      )

      const body = ObjectSerializer.deserialize(bodyAsJson, 'TeamSettings')

      return {response, body}
    },

    /*
     */

    enterpriseUpdateTeamSettings: async function (
      teamId: string,
      teamSettingsChanges: TeamSettingsChanges,
    ): Promise<{response: Response; body: TeamSettings}> {
      const localVarPath = '/v2/teams_settings/{team_id}'.replace(
        '{' + 'team_id' + '}',
        encodeURIComponent(String(teamId)),
      )
      let localVarQueryParameters = new URLSearchParams()
      // verify required parameter 'teamId' is not null or undefined
      if (teamId === null || teamId === undefined) {
        throw new Error('Required parameter teamId was null or undefined when calling enterpriseUpdateTeamSettings.')
      }

      const resource = new URL(localVarPath, basePath)
      resource.search = localVarQueryParameters.toString()

      const {response, bodyAsJson} = await makeJsonRequest(
        typeof accessToken === 'function' ? await accessToken() : accessToken,
        'PATCH',
        resource,
        JSON.stringify(ObjectSerializer.serialize(teamSettingsChanges, 'TeamSettingsChanges')),

        logger,
      )

      const body = ObjectSerializer.deserialize(bodyAsJson, 'TeamSettings')

      return {response, body}
    },
  }
}
