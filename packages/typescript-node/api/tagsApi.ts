/**
 * Miro API
 * Miro API
 *
 * The version of the OpenAPI document: 0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

import fetch, {Response} from 'node-fetch'
import * as http from 'http'

/* tslint:disable:no-unused-locals */
import {GetBoards400Response} from '../model/getBoards400Response'
import {GetTagsResponse} from '../model/getTagsResponse'
import {ItemPagedResponse} from '../model/itemPagedResponse'
import {TagCreateRequest} from '../model/tagCreateRequest'
import {TagUpdateRequest} from '../model/tagUpdateRequest'
import {TagWithLinks} from '../model/tagWithLinks'
import {TagsPagedResponse} from '../model/tagsPagedResponse'

import {ObjectSerializer} from '../model/models'

import {HttpError, makeJsonRequest} from './apis'

let defaultBasePath = 'https://api.miro.com'

export interface TagsApiMethods {
  /**
   * Attach an existing tag to the specified item. Card and sticky note items can have up to 8 tags.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">boards:write</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 1</a><br/>
   * @summary Attach tag to item
   * @param boardIdPlatformTags [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) with the item that you want to add a tag to.
   * @param itemId [Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) to which you want to add a tag.
   * @param tagId [Unique identifier (ID) of the tag](https://developers.miro.com/reference/rest-api-tag-data-model) you want to add to the item.
   */
  attachTagToItem(
    boardIdPlatformTags: string,
    itemId: string,
    tagId: string,
  ): Promise<{response: Response; body: object}>
  /**
   * Creates a tag on a board.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">boards:write</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 1</a><br/>
   * @summary Create tag
   * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) where you want to create the tag.
   * @param tagCreateRequest
   */
  createTag(boardId: string, tagCreateRequest: TagCreateRequest): Promise<{response: Response; body: TagWithLinks}>
  /**
   * Deletes the specified tag from the board. The tag is also removed from all cards and sticky notes on the board.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">boards:write</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 1</a><br/>
   * @summary Delete tag
   * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) where you want to delete a specific tag.
   * @param tagId [Unique identifier (ID) of the tag](https://developers.miro.com/reference/rest-api-tag-data-model) that you want to delete.
   */
  deleteTag(boardId: string, tagId: string): Promise<{response: Response; body: object}>
  /**
   * Retrieves all the items that have the specified tag.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">boards:read</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 1</a><br/>
   * @summary Get items by tag
   * @param boardIdPlatformTags [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) where you want to retrieve a specific tag.
   * @param tagId [Unique identifier (ID) of the tag](https://developers.miro.com/reference/rest-api-tag-data-model) that you want to retrieve.
   * @param limit
   * @param offset
   */
  getItemsByTag(
    boardIdPlatformTags: string,
    tagId: string,
    query?: {
      limit?: string

      offset?: string
    },
  ): Promise<{response: Response; body: ItemPagedResponse}>
  /**
   * Retrieves information for a specific tag.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">boards:write</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 1</a><br/>
   * @summary Get tag
   * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) where you want to retrieve a specific tag.
   * @param tagId [Unique identifier (ID) of the tag](https://developers.miro.com/reference/rest-api-tag-data-model) that you want to retrieve.
   */
  getTag(boardId: string, tagId: string): Promise<{response: Response; body: TagWithLinks}>
  /**
   * Retrieves all the tags from the specified board.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">boards:read</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 1</a><br/>
   * @summary Get tags from board
   * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) whose tags you want to retrieve.
   * @param limit
   * @param offset
   */
  getTagsFromBoard(
    boardId: string,
    query?: {
      limit?: string

      offset?: string
    },
  ): Promise<{response: Response; body: TagsPagedResponse}>
  /**
   * Retrieves all the tags from the specified item.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">boards:read</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 1</a><br/>
   * @summary Get tags from item
   * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) with the item whose tags you want to retrieve.
   * @param itemId [Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) whose tags you want to retrieve.
   */
  getTagsFromItem(boardId: string, itemId: string): Promise<{response: Response; body: GetTagsResponse}>
  /**
   * Removes the specified tag from the specified item. The tag still exists on the board.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">boards:write</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 1</a><br/>
   * @summary Remove tag from item
   * @param boardIdPlatformTags [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) with the item that you want to remove a tag from.
   * @param itemId [Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to remove the tag from.
   * @param tagId [Unique identifier (ID) of the tag](https://developers.miro.com/reference/rest-api-tag-data-model) that you want to remove from the item.
   */
  removeTagFromItem(
    boardIdPlatformTags: string,
    itemId: string,
    tagId: string,
  ): Promise<{response: Response; body: object}>
  /**
   * Updates a tag based on the data properties provided in the request body.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">boards:write</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 1</a><br/>
   * @summary Update tag
   * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) where you want to update a specific tag.
   * @param tagId [Unique identifier (ID) of the tag](https://developers.miro.com/reference/rest-api-tag-data-model) that you want to update.
   * @param tagUpdateRequest
   */
  updateTag(
    boardId: string,
    tagId: string,
    tagUpdateRequest: TagUpdateRequest,
  ): Promise<{response: Response; body: TagWithLinks}>
}

export function TagsApi(
  accessToken: string | (() => Promise<string>),
  basePath: string = defaultBasePath,
  logger?: (...thing: any) => void,
): TagsApiMethods {
  return {
    /*
     */

    attachTagToItem: async function (
      boardIdPlatformTags: string,
      itemId: string,
      tagId: string,
    ): Promise<{response: Response; body: object}> {
      const localVarPath = '/v2/boards/{board_id_PlatformTags}/items/{item_id}'
        .replace('{' + 'board_id_PlatformTags' + '}', encodeURIComponent(String(boardIdPlatformTags)))
        .replace('{' + 'item_id' + '}', encodeURIComponent(String(itemId)))
      let localVarQueryParameters = new URLSearchParams()
      // verify required parameter 'boardIdPlatformTags' is not null or undefined
      if (boardIdPlatformTags === null || boardIdPlatformTags === undefined) {
        throw new Error('Required parameter boardIdPlatformTags was null or undefined when calling attachTagToItem.')
      }
      // verify required parameter 'itemId' is not null or undefined
      if (itemId === null || itemId === undefined) {
        throw new Error('Required parameter itemId was null or undefined when calling attachTagToItem.')
      }

      // verify required parameter 'tagId' is not null or undefined
      if (tagId === null || tagId === undefined) {
        throw new Error('Required parameter tagId was null or undefined when calling attachTagToItem.')
      }

      if (tagId !== undefined) {
        localVarQueryParameters.append('tag_id', ObjectSerializer.serialize(tagId, 'string'))
      }

      const resource = new URL(localVarPath, basePath)
      resource.search = localVarQueryParameters.toString()

      const {response, bodyAsJson} = await makeJsonRequest(
        typeof accessToken === 'function' ? await accessToken() : accessToken,
        'POST',
        resource,
        undefined,

        logger,
      )

      const body = ObjectSerializer.deserialize(bodyAsJson, 'object')

      return {response, body}
    },

    /*
     */

    createTag: async function (
      boardId: string,
      tagCreateRequest: TagCreateRequest,
    ): Promise<{response: Response; body: TagWithLinks}> {
      const localVarPath = '/v2/boards/{board_id}/tags'.replace(
        '{' + 'board_id' + '}',
        encodeURIComponent(String(boardId)),
      )
      let localVarQueryParameters = new URLSearchParams()
      // verify required parameter 'boardId' is not null or undefined
      if (boardId === null || boardId === undefined) {
        throw new Error('Required parameter boardId was null or undefined when calling createTag.')
      }

      const resource = new URL(localVarPath, basePath)
      resource.search = localVarQueryParameters.toString()

      const {response, bodyAsJson} = await makeJsonRequest(
        typeof accessToken === 'function' ? await accessToken() : accessToken,
        'POST',
        resource,
        JSON.stringify(ObjectSerializer.serialize(tagCreateRequest, 'TagCreateRequest')),

        logger,
      )

      const body = ObjectSerializer.deserialize(bodyAsJson, 'TagWithLinks')

      return {response, body}
    },

    /*
     */

    deleteTag: async function (boardId: string, tagId: string): Promise<{response: Response; body: object}> {
      const localVarPath = '/v2/boards/{board_id}/tags/{tag_id}'
        .replace('{' + 'board_id' + '}', encodeURIComponent(String(boardId)))
        .replace('{' + 'tag_id' + '}', encodeURIComponent(String(tagId)))
      let localVarQueryParameters = new URLSearchParams()
      // verify required parameter 'boardId' is not null or undefined
      if (boardId === null || boardId === undefined) {
        throw new Error('Required parameter boardId was null or undefined when calling deleteTag.')
      }
      // verify required parameter 'tagId' is not null or undefined
      if (tagId === null || tagId === undefined) {
        throw new Error('Required parameter tagId was null or undefined when calling deleteTag.')
      }

      const resource = new URL(localVarPath, basePath)
      resource.search = localVarQueryParameters.toString()

      const {response, bodyAsJson} = await makeJsonRequest(
        typeof accessToken === 'function' ? await accessToken() : accessToken,
        'DELETE',
        resource,
        undefined,

        logger,
      )

      const body = ObjectSerializer.deserialize(bodyAsJson, 'object')

      return {response, body}
    },

    /*
     */

    getItemsByTag: async function (
      boardIdPlatformTags: string,
      tagId: string,
      query?: {
        limit?: string

        offset?: string
      },
    ): Promise<{response: Response; body: ItemPagedResponse}> {
      const localVarPath = '/v2/boards/{board_id_PlatformTags}/items'.replace(
        '{' + 'board_id_PlatformTags' + '}',
        encodeURIComponent(String(boardIdPlatformTags)),
      )
      let localVarQueryParameters = new URLSearchParams()
      // verify required parameter 'boardIdPlatformTags' is not null or undefined
      if (boardIdPlatformTags === null || boardIdPlatformTags === undefined) {
        throw new Error('Required parameter boardIdPlatformTags was null or undefined when calling getItemsByTag.')
      }

      if (query?.limit !== undefined) {
        localVarQueryParameters.append('limit', ObjectSerializer.serialize(query?.limit, 'string'))
      }

      if (query?.offset !== undefined) {
        localVarQueryParameters.append('offset', ObjectSerializer.serialize(query?.offset, 'string'))
      }

      // verify required parameter 'tagId' is not null or undefined
      if (tagId === null || tagId === undefined) {
        throw new Error('Required parameter tagId was null or undefined when calling getItemsByTag.')
      }

      if (tagId !== undefined) {
        localVarQueryParameters.append('tag_id', ObjectSerializer.serialize(tagId, 'string'))
      }

      const resource = new URL(localVarPath, basePath)
      resource.search = localVarQueryParameters.toString()

      const {response, bodyAsJson} = await makeJsonRequest(
        typeof accessToken === 'function' ? await accessToken() : accessToken,
        'GET',
        resource,
        undefined,

        logger,
      )

      const body = ObjectSerializer.deserialize(bodyAsJson, 'ItemPagedResponse')

      return {response, body}
    },

    /*
     */

    getTag: async function (boardId: string, tagId: string): Promise<{response: Response; body: TagWithLinks}> {
      const localVarPath = '/v2/boards/{board_id}/tags/{tag_id}'
        .replace('{' + 'board_id' + '}', encodeURIComponent(String(boardId)))
        .replace('{' + 'tag_id' + '}', encodeURIComponent(String(tagId)))
      let localVarQueryParameters = new URLSearchParams()
      // verify required parameter 'boardId' is not null or undefined
      if (boardId === null || boardId === undefined) {
        throw new Error('Required parameter boardId was null or undefined when calling getTag.')
      }
      // verify required parameter 'tagId' is not null or undefined
      if (tagId === null || tagId === undefined) {
        throw new Error('Required parameter tagId was null or undefined when calling getTag.')
      }

      const resource = new URL(localVarPath, basePath)
      resource.search = localVarQueryParameters.toString()

      const {response, bodyAsJson} = await makeJsonRequest(
        typeof accessToken === 'function' ? await accessToken() : accessToken,
        'GET',
        resource,
        undefined,

        logger,
      )

      const body = ObjectSerializer.deserialize(bodyAsJson, 'TagWithLinks')

      return {response, body}
    },

    /*
     */

    getTagsFromBoard: async function (
      boardId: string,
      query?: {
        limit?: string

        offset?: string
      },
    ): Promise<{response: Response; body: TagsPagedResponse}> {
      const localVarPath = '/v2/boards/{board_id}/tags'.replace(
        '{' + 'board_id' + '}',
        encodeURIComponent(String(boardId)),
      )
      let localVarQueryParameters = new URLSearchParams()
      // verify required parameter 'boardId' is not null or undefined
      if (boardId === null || boardId === undefined) {
        throw new Error('Required parameter boardId was null or undefined when calling getTagsFromBoard.')
      }

      if (query?.limit !== undefined) {
        localVarQueryParameters.append('limit', ObjectSerializer.serialize(query?.limit, 'string'))
      }

      if (query?.offset !== undefined) {
        localVarQueryParameters.append('offset', ObjectSerializer.serialize(query?.offset, 'string'))
      }

      const resource = new URL(localVarPath, basePath)
      resource.search = localVarQueryParameters.toString()

      const {response, bodyAsJson} = await makeJsonRequest(
        typeof accessToken === 'function' ? await accessToken() : accessToken,
        'GET',
        resource,
        undefined,

        logger,
      )

      const body = ObjectSerializer.deserialize(bodyAsJson, 'TagsPagedResponse')

      return {response, body}
    },

    /*
     */

    getTagsFromItem: async function (
      boardId: string,
      itemId: string,
    ): Promise<{response: Response; body: GetTagsResponse}> {
      const localVarPath = '/v2/boards/{board_id}/items/{item_id}/tags'
        .replace('{' + 'board_id' + '}', encodeURIComponent(String(boardId)))
        .replace('{' + 'item_id' + '}', encodeURIComponent(String(itemId)))
      let localVarQueryParameters = new URLSearchParams()
      // verify required parameter 'boardId' is not null or undefined
      if (boardId === null || boardId === undefined) {
        throw new Error('Required parameter boardId was null or undefined when calling getTagsFromItem.')
      }
      // verify required parameter 'itemId' is not null or undefined
      if (itemId === null || itemId === undefined) {
        throw new Error('Required parameter itemId was null or undefined when calling getTagsFromItem.')
      }

      const resource = new URL(localVarPath, basePath)
      resource.search = localVarQueryParameters.toString()

      const {response, bodyAsJson} = await makeJsonRequest(
        typeof accessToken === 'function' ? await accessToken() : accessToken,
        'GET',
        resource,
        undefined,

        logger,
      )

      const body = ObjectSerializer.deserialize(bodyAsJson, 'GetTagsResponse')

      return {response, body}
    },

    /*
     */

    removeTagFromItem: async function (
      boardIdPlatformTags: string,
      itemId: string,
      tagId: string,
    ): Promise<{response: Response; body: object}> {
      const localVarPath = '/v2/boards/{board_id_PlatformTags}/items/{item_id}'
        .replace('{' + 'board_id_PlatformTags' + '}', encodeURIComponent(String(boardIdPlatformTags)))
        .replace('{' + 'item_id' + '}', encodeURIComponent(String(itemId)))
      let localVarQueryParameters = new URLSearchParams()
      // verify required parameter 'boardIdPlatformTags' is not null or undefined
      if (boardIdPlatformTags === null || boardIdPlatformTags === undefined) {
        throw new Error('Required parameter boardIdPlatformTags was null or undefined when calling removeTagFromItem.')
      }
      // verify required parameter 'itemId' is not null or undefined
      if (itemId === null || itemId === undefined) {
        throw new Error('Required parameter itemId was null or undefined when calling removeTagFromItem.')
      }

      // verify required parameter 'tagId' is not null or undefined
      if (tagId === null || tagId === undefined) {
        throw new Error('Required parameter tagId was null or undefined when calling removeTagFromItem.')
      }

      if (tagId !== undefined) {
        localVarQueryParameters.append('tag_id', ObjectSerializer.serialize(tagId, 'string'))
      }

      const resource = new URL(localVarPath, basePath)
      resource.search = localVarQueryParameters.toString()

      const {response, bodyAsJson} = await makeJsonRequest(
        typeof accessToken === 'function' ? await accessToken() : accessToken,
        'DELETE',
        resource,
        undefined,

        logger,
      )

      const body = ObjectSerializer.deserialize(bodyAsJson, 'object')

      return {response, body}
    },

    /*
     */

    updateTag: async function (
      boardId: string,
      tagId: string,
      tagUpdateRequest: TagUpdateRequest,
    ): Promise<{response: Response; body: TagWithLinks}> {
      const localVarPath = '/v2/boards/{board_id}/tags/{tag_id}'
        .replace('{' + 'board_id' + '}', encodeURIComponent(String(boardId)))
        .replace('{' + 'tag_id' + '}', encodeURIComponent(String(tagId)))
      let localVarQueryParameters = new URLSearchParams()
      // verify required parameter 'boardId' is not null or undefined
      if (boardId === null || boardId === undefined) {
        throw new Error('Required parameter boardId was null or undefined when calling updateTag.')
      }
      // verify required parameter 'tagId' is not null or undefined
      if (tagId === null || tagId === undefined) {
        throw new Error('Required parameter tagId was null or undefined when calling updateTag.')
      }

      const resource = new URL(localVarPath, basePath)
      resource.search = localVarQueryParameters.toString()

      const {response, bodyAsJson} = await makeJsonRequest(
        typeof accessToken === 'function' ? await accessToken() : accessToken,
        'PATCH',
        resource,
        JSON.stringify(ObjectSerializer.serialize(tagUpdateRequest, 'TagUpdateRequest')),

        logger,
      )

      const body = ObjectSerializer.deserialize(bodyAsJson, 'TagWithLinks')

      return {response, body}
    },
  }
}
