/**
 * Miro API
 * Miro API
 *
 * The version of the OpenAPI document: 0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

import fetch, {Response} from 'node-fetch'
import * as http from 'http'

/* tslint:disable:no-unused-locals */
import {BoardDataClassificationLabel} from '../model/boardDataClassificationLabel'
import {DataClassificationLabelId} from '../model/dataClassificationLabelId'

import {ObjectSerializer} from '../model/models'

import {HttpError, makeJsonRequest} from './apis'

let defaultBasePath = 'https://api.miro.com'

export interface BoardClassificationBoardLevelApiMethods {
  /**
   * Retrieves board classification for a board.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">boards:read</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 2</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=\"blank\" href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
   * @summary Get board classification
   * @param orgId id of the organization
   * @param teamId id of the team
   * @param boardId Unique identifier of the board that you want to retrieve.
   */
  enterpriseDataclassificationBoardGet(
    orgId: string,
    teamId: string,
    boardId: string,
  ): Promise<{response: Response; body: BoardDataClassificationLabel}>
  /**
   * Updates board classification for an existing board.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">boards:write</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 2</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=\"blank\" href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
   * @summary Update board classification
   * @param orgId id of the organization
   * @param teamId id of the team
   * @param boardId Unique identifier of the board that you want to update.
   * @param dataClassificationLabelId
   */
  enterpriseDataclassificationBoardSet(
    orgId: string,
    teamId: string,
    boardId: string,
    dataClassificationLabelId: DataClassificationLabelId,
  ): Promise<{response: Response; body: BoardDataClassificationLabel}>
}

export function BoardClassificationBoardLevelApi(
  accessToken: string | (() => Promise<string>),
  basePath: string = defaultBasePath,
  logger?: (...thing: any) => void,
): BoardClassificationBoardLevelApiMethods {
  return {
    /*
     */

    enterpriseDataclassificationBoardGet: async function (
      orgId: string,
      teamId: string,
      boardId: string,
    ): Promise<{response: Response; body: BoardDataClassificationLabel}> {
      const localVarPath = '/v2/orgs/{org_id}/teams/{team_id}/boards/{board_id}/data-classification'
        .replace('{' + 'org_id' + '}', encodeURIComponent(String(orgId)))
        .replace('{' + 'team_id' + '}', encodeURIComponent(String(teamId)))
        .replace('{' + 'board_id' + '}', encodeURIComponent(String(boardId)))
      let localVarQueryParameters = new URLSearchParams()
      // verify required parameter 'orgId' is not null or undefined
      if (orgId === null || orgId === undefined) {
        throw new Error(
          'Required parameter orgId was null or undefined when calling enterpriseDataclassificationBoardGet.',
        )
      }
      // verify required parameter 'teamId' is not null or undefined
      if (teamId === null || teamId === undefined) {
        throw new Error(
          'Required parameter teamId was null or undefined when calling enterpriseDataclassificationBoardGet.',
        )
      }
      // verify required parameter 'boardId' is not null or undefined
      if (boardId === null || boardId === undefined) {
        throw new Error(
          'Required parameter boardId was null or undefined when calling enterpriseDataclassificationBoardGet.',
        )
      }

      const resource = new URL(localVarPath, basePath)
      resource.search = localVarQueryParameters.toString()

      const {response, bodyAsJson} = await makeJsonRequest(
        typeof accessToken === 'function' ? await accessToken() : accessToken,
        'GET',
        resource,
        undefined,

        logger,
      )

      const body = ObjectSerializer.deserialize(bodyAsJson, 'BoardDataClassificationLabel')

      return {response, body}
    },

    /*
     */

    enterpriseDataclassificationBoardSet: async function (
      orgId: string,
      teamId: string,
      boardId: string,
      dataClassificationLabelId: DataClassificationLabelId,
    ): Promise<{response: Response; body: BoardDataClassificationLabel}> {
      const localVarPath = '/v2/orgs/{org_id}/teams/{team_id}/boards/{board_id}/data-classification'
        .replace('{' + 'org_id' + '}', encodeURIComponent(String(orgId)))
        .replace('{' + 'team_id' + '}', encodeURIComponent(String(teamId)))
        .replace('{' + 'board_id' + '}', encodeURIComponent(String(boardId)))
      let localVarQueryParameters = new URLSearchParams()
      // verify required parameter 'orgId' is not null or undefined
      if (orgId === null || orgId === undefined) {
        throw new Error(
          'Required parameter orgId was null or undefined when calling enterpriseDataclassificationBoardSet.',
        )
      }
      // verify required parameter 'teamId' is not null or undefined
      if (teamId === null || teamId === undefined) {
        throw new Error(
          'Required parameter teamId was null or undefined when calling enterpriseDataclassificationBoardSet.',
        )
      }
      // verify required parameter 'boardId' is not null or undefined
      if (boardId === null || boardId === undefined) {
        throw new Error(
          'Required parameter boardId was null or undefined when calling enterpriseDataclassificationBoardSet.',
        )
      }

      const resource = new URL(localVarPath, basePath)
      resource.search = localVarQueryParameters.toString()

      const {response, bodyAsJson} = await makeJsonRequest(
        typeof accessToken === 'function' ? await accessToken() : accessToken,
        'POST',
        resource,
        JSON.stringify(ObjectSerializer.serialize(dataClassificationLabelId, 'DataClassificationLabelId')),

        logger,
      )

      const body = ObjectSerializer.deserialize(bodyAsJson, 'BoardDataClassificationLabel')

      return {response, body}
    },
  }
}
