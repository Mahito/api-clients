/**
 * Miro API
 * Miro API
 *
 * The version of the OpenAPI document: 0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * Contains information about the style of a connector, such as the color or caption font size
 */
export class ConnectorStyle {
  /**
   * Hex value representing the color for the captions on the connector. Default: `#1a1a1a`
   */
  'color'?: string
  /**
   * The decoration cap of the connector end, like an arrow or circle. Default: stealth. Possible values: `none`, `stealth`, `diamond`, `diamond_filled`, `oval`, `oval_filled`, `arrow`, `triangle`, `triangle_filled`, `erd_one`, `erd_many`, `erd_only_one`, `erd_zero_or_one`, `erd_one_or_many`, `erd_zero_or_many`
   */
  'endStrokeCap'?: ConnectorStyle.EndStrokeCapEnum
  /**
   * Defines the font size, in dp, for the captions on the connector. Default: 14
   */
  'fontSize'?: string
  /**
   * The decoration cap of the connector end, like an arrow or circle. Default: none. Possible values: `none`, `stealth`, `diamond`, `diamond_filled`, `oval`, `oval_filled`, `arrow`, `triangle`, `triangle_filled`, `erd_one`, `erd_many`, `erd_only_one`, `erd_zero_or_one`, `erd_one_or_many`, `erd_zero_or_many`
   */
  'startStrokeCap'?: ConnectorStyle.StartStrokeCapEnum
  /**
   * Hex value of the color of the connector line. Default: #000000.
   */
  'strokeColor'?: string
  /**
   * The stroke pattern of the connector line. Default: normal. Possible values: `normal`, `dotted`, `dashed`
   */
  'strokeStyle'?: ConnectorStyle.StrokeStyleEnum
  /**
   * The thickness of the connector line, in dp. Default: 1.0.
   */
  'strokeWidth'?: string
  /**
   * The captions orientation relatively to the connector line curvature. Default: aligned. Possible values: `horizontal`, `aligned`
   */
  'textOrientation'?: ConnectorStyle.TextOrientationEnum

  /** @ignore */
  static discriminator: string | undefined = undefined

  /** @ignore */
  static attributeTypeMap: Array<{name: string; baseName: string; type: string}> = [
    {
      name: 'color',
      baseName: 'color',
      type: 'string',
    },
    {
      name: 'endStrokeCap',
      baseName: 'endStrokeCap',
      type: 'ConnectorStyle.EndStrokeCapEnum',
    },
    {
      name: 'fontSize',
      baseName: 'fontSize',
      type: 'string',
    },
    {
      name: 'startStrokeCap',
      baseName: 'startStrokeCap',
      type: 'ConnectorStyle.StartStrokeCapEnum',
    },
    {
      name: 'strokeColor',
      baseName: 'strokeColor',
      type: 'string',
    },
    {
      name: 'strokeStyle',
      baseName: 'strokeStyle',
      type: 'ConnectorStyle.StrokeStyleEnum',
    },
    {
      name: 'strokeWidth',
      baseName: 'strokeWidth',
      type: 'string',
    },
    {
      name: 'textOrientation',
      baseName: 'textOrientation',
      type: 'ConnectorStyle.TextOrientationEnum',
    },
  ]

  /** @ignore */
  static getAttributeTypeMap() {
    return ConnectorStyle.attributeTypeMap
  }
}

export namespace ConnectorStyle {
  export enum EndStrokeCapEnum {
    None = <any>'none',
    Stealth = <any>'stealth',
    Diamond = <any>'diamond',
    DiamondFilled = <any>'diamond_filled',
    Oval = <any>'oval',
    OvalFilled = <any>'oval_filled',
    Arrow = <any>'arrow',
    Triangle = <any>'triangle',
    TriangleFilled = <any>'triangle_filled',
    ErdOne = <any>'erd_one',
    ErdMany = <any>'erd_many',
    ErdOnlyOne = <any>'erd_only_one',
    ErdZeroOrOne = <any>'erd_zero_or_one',
    ErdOneOrMany = <any>'erd_one_or_many',
    ErdZeroOrMany = <any>'erd_zero_or_many',
  }
  export enum StartStrokeCapEnum {
    None = <any>'none',
    Stealth = <any>'stealth',
    Diamond = <any>'diamond',
    DiamondFilled = <any>'diamond_filled',
    Oval = <any>'oval',
    OvalFilled = <any>'oval_filled',
    Arrow = <any>'arrow',
    Triangle = <any>'triangle',
    TriangleFilled = <any>'triangle_filled',
    ErdOne = <any>'erd_one',
    ErdMany = <any>'erd_many',
    ErdOnlyOne = <any>'erd_only_one',
    ErdZeroOrOne = <any>'erd_zero_or_one',
    ErdOneOrMany = <any>'erd_one_or_many',
    ErdZeroOrMany = <any>'erd_zero_or_many',
  }
  export enum StrokeStyleEnum {
    Normal = <any>'normal',
    Dotted = <any>'dotted',
    Dashed = <any>'dashed',
  }
  export enum TextOrientationEnum {
    Horizontal = <any>'horizontal',
    Aligned = <any>'aligned',
  }
}
