/**
 * Platform Tags
 * SCIM V1 API implemented by Miro
 *
 * The version of the OpenAPI document: v2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as http from 'http';
import { UpdateUserRequest } from '../model/updateUserRequest';
import { UserListResponse } from '../model/userListResponse';
import { UserSchema } from '../model/userSchema';
export declare function UserApi(accessToken: string): {
    /**
     * Creates a new user.
     * @param xClientType
     * @param userSchema Payload must include &lt;b&gt;userName&lt;/b&gt; attribute populated with an email address, &lt;b&gt;familyName&lt;/b&gt;, and &lt;b&gt;givenName&lt;/b&gt; or a &lt;b&gt;displayName&lt;/b&gt; attribute. If displayName is not populated, a combination of givenName and familyName is used.
     */
    scimCreateUser: (xClientType?: string, userSchema?: UserSchema) => Promise<{
        response: http.IncomingMessage;
        body: UserSchema;
    }>;
    /**
     * Deletes a single user from the organization. A user who is the last admin in the team or the last admin in the organization cannot be deleted.
     * @param userId
     */
    scimDeleteUser: (userId: number) => Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    /**
     * Retrieves a single user resource
     * @param userId
     */
    scimGetUser: (userId: number) => Promise<{
        response: http.IncomingMessage;
        body: UserSchema;
    }>;
    /**
     * Retrieves the list of users in your organization. <br><b>Note</b>: Users with role \"ORGANIZATION_EXTERNAL_USER\" or \"ORGANIZATION_TEAM_GUEST_USER\" are not retrieved in this request
     * @param attributes A comma-separated list of attribute names to return in the response. Example attributes&#x3D;id,displayName
     * @param filter You can request a subset of resources by specifying the filter query parameter containing a filter expression. Attribute names and attribute operators used in filters are case insensitive. The filter parameter must contain at least one valid expression. Each expression must contain an attribute name followed by an attribute operator and an optional value. &lt;br&gt;eq &#x3D; equal&lt;br&gt; ne &#x3D; not equal&lt;br&gt; co &#x3D; contains&lt;br&gt; sw &#x3D; starts with&lt;br&gt; ew &#x3D; ends with&lt;br&gt; pr &#x3D; preset (has value)&lt;br&gt; gt &#x3D; greater than&lt;br&gt; ge &#x3D; greater than or equal to&lt;br&gt; lt &#x3D; less than&lt;br&gt; le &#x3D; less than or equal to&lt;br&gt; and &#x3D; Logical \&quot;and\&quot;&lt;br&gt; or &#x3D; Logical \&quot;or\&quot;&lt;br&gt; not &#x3D; \&quot;Not\&quot; function&lt;br&gt; () &#x3D; Precedence grouping &lt;br&gt;The value must be passed within parenthesis. &lt;br&gt;Example: filter&#x3D;(userName eq \&quot;user@miro.com\&quot;)
     * @param startIndex Start index (1-based). Example startIndex&#x3D;1
     * @param count Specifies the desired maximum number of query results per page. Example count&#x3D;12
     * @param sortBy Specifies the attribute whose value will be used to order the response. Example sortBy&#x3D;userName
     * @param sortOrder Defines the order in which the \&#39;sortBy\&#39; parameter is applied. Allowed values are \&#39;ascending\&#39; and \&#39;descending\&#39;. Example sortOrder&#x3D;ascending
     */
    scimGetUsers: (attributes?: string, filter?: string, startIndex?: number, count?: number, sortBy?: string, sortOrder?: 'ascending' | 'descending') => Promise<{
        response: http.IncomingMessage;
        body: UserListResponse;
    }>;
    /**
     * Updates an existing user resource. It is the easiest way to replace the user information.
     * @param userId
     * @param xClientType
     * @param userSchema
     */
    scimReplaceUser: (userId: number, xClientType?: string, userSchema?: UserSchema) => Promise<{
        response: http.IncomingMessage;
        body: UserSchema;
    }>;
    /**
     * Updates an existing user resource, overwriting values for specified attributes. Attributes that are not provided will remain unchanged. PATCH only updates the fields provided.
     * @param userId
     * @param xClientType
     * @param updateUserRequest The body of a PATCH request must contain the attribute Operations, whose value is an array of one or more PATCH operations. Each PATCH operation object must have exactly one op member.
     */
    scimUpdateUser: (userId: number, xClientType?: string, updateUserRequest?: UpdateUserRequest) => Promise<{
        response: http.IncomingMessage;
        body: UserSchema;
    }>;
};
