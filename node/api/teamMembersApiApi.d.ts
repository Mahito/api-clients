/**
 * Platform Tags
 * SCIM V1 API implemented by Miro
 *
 * The version of the OpenAPI document: v2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as http from 'http';
import { InvitationResult } from '../model/invitationResult';
import { TeamMember } from '../model/teamMember';
import { TeamMemberChanges } from '../model/teamMemberChanges';
import { TeamMemberInvite } from '../model/teamMemberInvite';
export declare function TeamMembersApiApi(accessToken: string): {
    /**
     * Deletes team member from team by id.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">organizations:teams:write</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 1</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=\"blank\" href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
     * @summary Delete team member from team
     * @param orgId The id of an Organization.
     * @param teamId The id of a Team.
     * @param memberId The id of a Team member.
     */
    enterpriseDeleteTeamMember: (orgId: string, teamId: string, memberId: string) => Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
    /**
     * Retrieves team member by id.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">organizations:teams:read</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 1</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=\"blank\" href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
     * @summary Get team member
     * @param orgId The id of an Organization.
     * @param teamId The id of a Team.
     * @param memberId The id of a Team member.
     */
    enterpriseGetTeamMember: (orgId: string, teamId: string, memberId: string) => Promise<{
        response: http.IncomingMessage;
        body: TeamMember;
    }>;
    /**
     * Retrieves team members by cursor.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">organizations:teams:read</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 2</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=\"blank\" href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
     * @summary List team members
     * @param orgId The id of an Organization.
     * @param teamId The id of a Team.
     * @param limit Limit for the number of team members returned in the result list.
     * @param cursor The ID of the team member used as the reference for pagination. To retrieve the first portion of the collection don\&#39;t pass a cursor value. To retrieve the next portion of the collection, set the &#x60;cursor&#x60; parameter value to the ID of the last team member you received in the response of the previous request.
     * @param filterQuery Filtering query
     */
    enterpriseGetTeamMembers: (orgId: string, teamId: string, limit?: number, cursor?: string, filterQuery?: string) => Promise<{
        response: http.IncomingMessage;
        body: Array<TeamMember>;
    }>;
    /**
     * Invites a new member to an existing team.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">organizations:teams:write</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 2</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=\"blank\" href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
     * @summary Invite team members
     * @param orgId The id of an Organization.
     * @param teamId The id of a Team.
     * @param teamMemberInvite
     */
    enterpriseInviteTeamMember: (orgId: string, teamId: string, teamMemberInvite: TeamMemberInvite) => Promise<{
        response: http.IncomingMessage;
        body: InvitationResult;
    }>;
    /**
     * Updates team member role in team by id.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">organizations:teams:write</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 2</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=\"blank\" href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
     * @summary Update team member
     * @param orgId The id of an Organization.
     * @param teamId The id of a Team.
     * @param memberId The id of a Team member.
     * @param teamMemberChanges
     */
    enterpriseUpdateTeamMember: (orgId: string, teamId: string, memberId: string, teamMemberChanges: TeamMemberChanges) => Promise<{
        response: http.IncomingMessage;
        body: TeamMember;
    }>;
};
