/**
 * Platform Tags
 * SCIM V1 API implemented by Miro
 *
 * The version of the OpenAPI document: v2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as http from 'http';
import { EnterpriseGetOrganizationMembers200Response } from '../model/enterpriseGetOrganizationMembers200Response';
import { Organization } from '../model/organization';
import { OrganizationMember } from '../model/organizationMember';
import { OrganizationMembersSearchQuery } from '../model/organizationMembersSearchQuery';
export declare function OrganizationsApi(accessToken: string): {
    /**
     * Retrieves organization information.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">organizations:read</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 3</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=\"blank\" href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
     * @summary Get organization info
     * @param orgId id of the organization
     */
    enterpriseGetOrganization: (orgId: string) => Promise<{
        response: http.IncomingMessage;
        body: Organization;
    }>;
    /**
     * Retrieves organization member information for an existing organization.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">organizations:read</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 3</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=\"blank\" href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
     * @summary Get organization member
     * @param orgId id of the organization
     * @param memberId id of the organization member
     */
    enterpriseGetOrganizationMember: (orgId: string, memberId: string) => Promise<{
        response: http.IncomingMessage;
        body: OrganizationMember;
    }>;
    /**
     * Retrieves organization members based on the organization ID and the cursor, or based on the user emails provided in the request.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">organizations:read</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 3</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=\"blank\" href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
     * @summary Get organization members
     * @param orgId id of the organization
     * @param query query to be used for organization members retrieval
     */
    enterpriseGetOrganizationMembers: (orgId: string, query: OrganizationMembersSearchQuery) => Promise<{
        response: http.IncomingMessage;
        body: EnterpriseGetOrganizationMembers200Response;
    }>;
};
