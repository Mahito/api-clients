/**
 * Platform Tags
 * SCIM V1 API implemented by Miro
 *
 * The version of the OpenAPI document: v2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as http from 'http';
import { CreateTeamRequest } from '../model/createTeamRequest';
import { Team } from '../model/team';
import { TeamChanges } from '../model/teamChanges';
export declare function TeamsApiApi(accessToken: string): {
    /**
     * Creates a new team in an existing organization.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">organizations:teams:write</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 1</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=\"blank\" href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
     * @summary Create team
     * @param orgId The id of an Organization.
     * @param createTeamRequest
     */
    enterpriseCreateTeam: (orgId: string, createTeamRequest: CreateTeamRequest) => Promise<{
        response: http.IncomingMessage;
        body: Team;
    }>;
    /**
     * Deletes an existing team.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">organizations:teams:write</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 4</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=\"blank\" href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
     * @summary Delete team
     * @param orgId The id of an Organization.
     * @param teamId The id of a Team.
     */
    enterpriseDeleteTeam: (orgId: string, teamId: string) => Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
    /**
     * Retrieves team information for an existing team.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">organizations:teams:read</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 1</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=\"blank\" href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
     * @summary Get team
     * @param orgId The id of an Organization.
     * @param teamId The id of a Team.
     */
    enterpriseGetTeam: (orgId: string, teamId: string) => Promise<{
        response: http.IncomingMessage;
        body: Team;
    }>;
    /**
     * Retrieves list of teams in an existing organization.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">organizations:teams:read</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 1</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=\"blank\" href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
     * @summary List teams
     * @param orgId The id of an Organization.
     * @param limit Limit of teams in result list
     * @param cursor Team id that will be used to find team next to this id in the sorted list
     * @param filterQuery Filtering query
     */
    enterpriseGetTeams: (orgId: string, limit?: number, cursor?: string, filterQuery?: string) => Promise<{
        response: http.IncomingMessage;
        body: Array<Team>;
    }>;
    /**
     * Updates an existing team.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">organizations:teams:write</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 1</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=\"blank\" href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
     * @summary Update team
     * @param orgId The id of an Organization.
     * @param teamId The id of a Team.
     * @param teamChanges
     */
    enterpriseUpdateTeam: (orgId: string, teamId: string, teamChanges: TeamChanges) => Promise<{
        response: http.IncomingMessage;
        body: Team;
    }>;
};
