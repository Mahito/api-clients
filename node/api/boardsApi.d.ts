/**
 * Platform Tags
 * SCIM V1 API implemented by Miro
 *
 * The version of the OpenAPI document: v2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as http from 'http';
import { BoardChanges } from '../model/boardChanges';
import { BoardWithLinks } from '../model/boardWithLinks';
import { BoardsPagedResponse } from '../model/boardsPagedResponse';
export declare function BoardsApi(accessToken: string): {
    /**
     * Creates a copy of an existing board. You can also update the name, description, sharing policy, and permissions policy for the new board in the request body.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">boards:write</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 4</a><br/>
     * @summary Copy board
     * @param copyFrom [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) that you want to copy.
     * @param boardChanges
     */
    copyBoard: (copyFrom: string, boardChanges?: BoardChanges) => Promise<{
        response: http.IncomingMessage;
        body: BoardWithLinks;
    }>;
    /**
     * Creates a board with the specified name and sharing policies.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">boards:write</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 3</a><br/>
     * @summary Create board
     * @param boardChanges
     */
    createBoard: (boardChanges?: BoardChanges) => Promise<{
        response: http.IncomingMessage;
        body: BoardWithLinks;
    }>;
    /**
     *
     * @summary Delete board
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) that you want to delete.
     */
    deleteBoard: (boardId: string) => Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
    /**
     * Retrieves a list of boards that match the search criteria provided in the request. If you are an Enterprise customer and a Company Admin, you can retrieve all boards, including all private boards (boards that haven\'t been specifically shared with you) by enabling Content Admin permissions. To enable Content Admin permissions, see https://help.miro.com/hc/en-us/articles/360012777280-Content-Admin-permissions-for-Company-Admins. Note that you only get results instantaneously when you filter by `team_id`. If you use any other filter,  you need to give a few seconds for the indexing of newly created boards before retrieving boards.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">boards:read</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 1</a><br/>
     * @summary Get boards
     * @param teamId
     * @param query
     * @param owner
     * @param limit
     * @param offset
     * @param sort
     */
    getBoards: (teamId?: string, query?: string, owner?: string, limit?: string, offset?: string, sort?: 'default' | 'last_modified' | 'last_opened' | 'last_created' | 'alphabetically') => Promise<{
        response: http.IncomingMessage;
        body: BoardsPagedResponse;
    }>;
    /**
     * Retrieves information about a board.<br/><h3>Required scope</h3> <a target=\"blank\" href=\"/reference/scopes\">boards:read</a> <br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\">Level 1</a><br/>
     * @summary Get specific board
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) that you want to retrieve.
     */
    getSpecificBoard: (boardId: string) => Promise<{
        response: http.IncomingMessage;
        body: BoardWithLinks;
    }>;
    /**
     *
     * @summary Update board
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) that you want to update.
     * @param boardChanges
     */
    updateBoard: (boardId: string, boardChanges: BoardChanges) => Promise<{
        response: http.IncomingMessage;
        body: BoardWithLinks;
    }>;
};
