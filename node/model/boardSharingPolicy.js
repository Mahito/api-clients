"use strict";
/**
 * Platform Tags
 * SCIM V1 API implemented by Miro
 *
 * The version of the OpenAPI document: v2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
exports.__esModule = true;
exports.BoardSharingPolicy = void 0;
/**
* Defines the public-level, organization-level, and team-level access for the board. The access level that a user gets depends on the highest level of access that results from considering the public-level, team-level, organization-level, and direct sharing access. For more information, see [Sharing policy](https://developers.miro.com/reference/rest-api-policy-data-model#sharing-policy).
*/
var BoardSharingPolicy = /** @class */ (function () {
    function BoardSharingPolicy() {
        /**
        * Defines the user role when inviting a user via the invite to team and board link. For Enterprise users, the `inviteToAccountAndBoardLinkAccess` parameter is always set to `no_access`. Possible values: `viewer`, `commenter`, `editor`, `coowner`, `owner`, `guest`, `no_access`
        */
        this['inviteToAccountAndBoardLinkAccess'] = BoardSharingPolicy.InviteToAccountAndBoardLinkAccessEnum.NoAccess;
        /**
        * Defines the organization-level access to the board. If the board is created for a team that does not belong to an organization, the `organizationAccess` parameter is always set to the default value. Possible values: `private`, `view`, `comment`, `edit`
        */
        this['organizationAccess'] = BoardSharingPolicy.OrganizationAccessEnum.Private;
    }
    BoardSharingPolicy.getAttributeTypeMap = function () {
        return BoardSharingPolicy.attributeTypeMap;
    };
    BoardSharingPolicy.discriminator = undefined;
    BoardSharingPolicy.attributeTypeMap = [
        {
            "name": "access",
            "baseName": "access",
            "type": "BoardSharingPolicy.AccessEnum"
        },
        {
            "name": "inviteToAccountAndBoardLinkAccess",
            "baseName": "inviteToAccountAndBoardLinkAccess",
            "type": "BoardSharingPolicy.InviteToAccountAndBoardLinkAccessEnum"
        },
        {
            "name": "organizationAccess",
            "baseName": "organizationAccess",
            "type": "BoardSharingPolicy.OrganizationAccessEnum"
        },
        {
            "name": "teamAccess",
            "baseName": "teamAccess",
            "type": "BoardSharingPolicy.TeamAccessEnum"
        }
    ];
    return BoardSharingPolicy;
}());
exports.BoardSharingPolicy = BoardSharingPolicy;
(function (BoardSharingPolicy) {
    var AccessEnum;
    (function (AccessEnum) {
        AccessEnum[AccessEnum["Private"] = 'private'] = "Private";
        AccessEnum[AccessEnum["View"] = 'view'] = "View";
        AccessEnum[AccessEnum["Edit"] = 'edit'] = "Edit";
        AccessEnum[AccessEnum["Comment"] = 'comment'] = "Comment";
    })(AccessEnum = BoardSharingPolicy.AccessEnum || (BoardSharingPolicy.AccessEnum = {}));
    var InviteToAccountAndBoardLinkAccessEnum;
    (function (InviteToAccountAndBoardLinkAccessEnum) {
        InviteToAccountAndBoardLinkAccessEnum[InviteToAccountAndBoardLinkAccessEnum["Viewer"] = 'viewer'] = "Viewer";
        InviteToAccountAndBoardLinkAccessEnum[InviteToAccountAndBoardLinkAccessEnum["Commenter"] = 'commenter'] = "Commenter";
        InviteToAccountAndBoardLinkAccessEnum[InviteToAccountAndBoardLinkAccessEnum["Editor"] = 'editor'] = "Editor";
        InviteToAccountAndBoardLinkAccessEnum[InviteToAccountAndBoardLinkAccessEnum["Coowner"] = 'coowner'] = "Coowner";
        InviteToAccountAndBoardLinkAccessEnum[InviteToAccountAndBoardLinkAccessEnum["Owner"] = 'owner'] = "Owner";
        InviteToAccountAndBoardLinkAccessEnum[InviteToAccountAndBoardLinkAccessEnum["Guest"] = 'guest'] = "Guest";
        InviteToAccountAndBoardLinkAccessEnum[InviteToAccountAndBoardLinkAccessEnum["NoAccess"] = 'no_access'] = "NoAccess";
    })(InviteToAccountAndBoardLinkAccessEnum = BoardSharingPolicy.InviteToAccountAndBoardLinkAccessEnum || (BoardSharingPolicy.InviteToAccountAndBoardLinkAccessEnum = {}));
    var OrganizationAccessEnum;
    (function (OrganizationAccessEnum) {
        OrganizationAccessEnum[OrganizationAccessEnum["Private"] = 'private'] = "Private";
        OrganizationAccessEnum[OrganizationAccessEnum["View"] = 'view'] = "View";
        OrganizationAccessEnum[OrganizationAccessEnum["Comment"] = 'comment'] = "Comment";
        OrganizationAccessEnum[OrganizationAccessEnum["Edit"] = 'edit'] = "Edit";
    })(OrganizationAccessEnum = BoardSharingPolicy.OrganizationAccessEnum || (BoardSharingPolicy.OrganizationAccessEnum = {}));
    var TeamAccessEnum;
    (function (TeamAccessEnum) {
        TeamAccessEnum[TeamAccessEnum["Private"] = 'private'] = "Private";
        TeamAccessEnum[TeamAccessEnum["View"] = 'view'] = "View";
        TeamAccessEnum[TeamAccessEnum["Comment"] = 'comment'] = "Comment";
        TeamAccessEnum[TeamAccessEnum["Edit"] = 'edit'] = "Edit";
    })(TeamAccessEnum = BoardSharingPolicy.TeamAccessEnum || (BoardSharingPolicy.TeamAccessEnum = {}));
})(BoardSharingPolicy = exports.BoardSharingPolicy || (exports.BoardSharingPolicy = {}));
exports.BoardSharingPolicy = BoardSharingPolicy;
