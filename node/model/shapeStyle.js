"use strict";
/**
 * Platform Tags
 * SCIM V1 API implemented by Miro
 *
 * The version of the OpenAPI document: v2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
exports.__esModule = true;
exports.ShapeStyle = void 0;
/**
* For information about the JSON properties, see [Style](https://developers.miro.com/reference/style).
*/
var ShapeStyle = /** @class */ (function () {
    function ShapeStyle() {
        /**
        * Defines the color of the border of the shape. Default: `#1a1a1a` (dark gray).
        */
        this['borderColor'] = '#1a1a1a';
        /**
        * Defines the opacity level of the shape border. Possible values: any number between `0` and `1`, where:  `0`: the background color is completely transparent or invisible  `1`: the background color is completely opaque or solid Default: `1.0` (solid color)
        */
        this['borderOpacity'] = '1.0';
        /**
        * Defines the style used to represent the border of the shape. Possible values: `normal`, `dotted`, `dashed`
        */
        this['borderStyle'] = ShapeStyle.BorderStyleEnum.Normal;
        /**
        * Defines the thickness of the shape border, in dp.
        */
        this['borderWidth'] = '2.0';
        /**
        * Hex value representing the color for the text within the shape item. Default: `#1a1a1a`
        */
        this['color'] = '#1a1a1a';
        /**
        * Opacity level of the fill color. Possible values: any number between `0` and `1`, where:  `0`: the background color is completely transparent or invisible  `1`: the background color is completely opaque or solid Default: `1.0` (solid color)
        */
        this['fillOpacity'] = '1.0';
        /**
        * Defines the font type for the text in the shape item. Possible values: `arial`, `abril_fatface`, `bangers`, `eb_garamond`, `georgia`, `graduate`, `gravitas_one`, `fredoka_one`, `nixie_one`, `open_sans`, `permanent_marker`, `pt_sans`, `pt_sans_narrow`, `pt_serif`, `rammetto_one`, `roboto`, `roboto_condensed`, `roboto_slab`, `caveat`, `times_new_roman`, `titan_one`, `lemon_tuesday`, `roboto_mono`, `noto_sans`, `plex_sans`, `plex_serif`, `plex_mono`, `spoof`, `tiempos_text`
        */
        this['fontFamily'] = ShapeStyle.FontFamilyEnum.Arial;
        /**
        * Defines the font size, in dp, for the text on the shape.
        */
        this['fontSize'] = '14';
        /**
        * Defines how the sticky note text is horizontally aligned. Possible values: `left`, `right`, `center`
        */
        this['textAlign'] = ShapeStyle.TextAlignEnum.Center;
        /**
        * Defines how the sticky note text is vertically aligned. Possible values: `top`, `middle`, `bottom`
        */
        this['textAlignVertical'] = ShapeStyle.TextAlignVerticalEnum.Top;
    }
    ShapeStyle.getAttributeTypeMap = function () {
        return ShapeStyle.attributeTypeMap;
    };
    ShapeStyle.discriminator = undefined;
    ShapeStyle.attributeTypeMap = [
        {
            "name": "borderColor",
            "baseName": "borderColor",
            "type": "string"
        },
        {
            "name": "borderOpacity",
            "baseName": "borderOpacity",
            "type": "string"
        },
        {
            "name": "borderStyle",
            "baseName": "borderStyle",
            "type": "ShapeStyle.BorderStyleEnum"
        },
        {
            "name": "borderWidth",
            "baseName": "borderWidth",
            "type": "string"
        },
        {
            "name": "color",
            "baseName": "color",
            "type": "string"
        },
        {
            "name": "fillColor",
            "baseName": "fillColor",
            "type": "string"
        },
        {
            "name": "fillOpacity",
            "baseName": "fillOpacity",
            "type": "string"
        },
        {
            "name": "fontFamily",
            "baseName": "fontFamily",
            "type": "ShapeStyle.FontFamilyEnum"
        },
        {
            "name": "fontSize",
            "baseName": "fontSize",
            "type": "string"
        },
        {
            "name": "textAlign",
            "baseName": "textAlign",
            "type": "ShapeStyle.TextAlignEnum"
        },
        {
            "name": "textAlignVertical",
            "baseName": "textAlignVertical",
            "type": "ShapeStyle.TextAlignVerticalEnum"
        }
    ];
    return ShapeStyle;
}());
exports.ShapeStyle = ShapeStyle;
(function (ShapeStyle) {
    var BorderStyleEnum;
    (function (BorderStyleEnum) {
        BorderStyleEnum[BorderStyleEnum["Normal"] = 'normal'] = "Normal";
        BorderStyleEnum[BorderStyleEnum["Dotted"] = 'dotted'] = "Dotted";
        BorderStyleEnum[BorderStyleEnum["Dashed"] = 'dashed'] = "Dashed";
    })(BorderStyleEnum = ShapeStyle.BorderStyleEnum || (ShapeStyle.BorderStyleEnum = {}));
    var FontFamilyEnum;
    (function (FontFamilyEnum) {
        FontFamilyEnum[FontFamilyEnum["Arial"] = 'arial'] = "Arial";
        FontFamilyEnum[FontFamilyEnum["AbrilFatface"] = 'abril_fatface'] = "AbrilFatface";
        FontFamilyEnum[FontFamilyEnum["Bangers"] = 'bangers'] = "Bangers";
        FontFamilyEnum[FontFamilyEnum["EbGaramond"] = 'eb_garamond'] = "EbGaramond";
        FontFamilyEnum[FontFamilyEnum["Georgia"] = 'georgia'] = "Georgia";
        FontFamilyEnum[FontFamilyEnum["Graduate"] = 'graduate'] = "Graduate";
        FontFamilyEnum[FontFamilyEnum["GravitasOne"] = 'gravitas_one'] = "GravitasOne";
        FontFamilyEnum[FontFamilyEnum["FredokaOne"] = 'fredoka_one'] = "FredokaOne";
        FontFamilyEnum[FontFamilyEnum["NixieOne"] = 'nixie_one'] = "NixieOne";
        FontFamilyEnum[FontFamilyEnum["OpenSans"] = 'open_sans'] = "OpenSans";
        FontFamilyEnum[FontFamilyEnum["PermanentMarker"] = 'permanent_marker'] = "PermanentMarker";
        FontFamilyEnum[FontFamilyEnum["PtSans"] = 'pt_sans'] = "PtSans";
        FontFamilyEnum[FontFamilyEnum["PtSansNarrow"] = 'pt_sans_narrow'] = "PtSansNarrow";
        FontFamilyEnum[FontFamilyEnum["PtSerif"] = 'pt_serif'] = "PtSerif";
        FontFamilyEnum[FontFamilyEnum["RammettoOne"] = 'rammetto_one'] = "RammettoOne";
        FontFamilyEnum[FontFamilyEnum["Roboto"] = 'roboto'] = "Roboto";
        FontFamilyEnum[FontFamilyEnum["RobotoCondensed"] = 'roboto_condensed'] = "RobotoCondensed";
        FontFamilyEnum[FontFamilyEnum["RobotoSlab"] = 'roboto_slab'] = "RobotoSlab";
        FontFamilyEnum[FontFamilyEnum["Caveat"] = 'caveat'] = "Caveat";
        FontFamilyEnum[FontFamilyEnum["TimesNewRoman"] = 'times_new_roman'] = "TimesNewRoman";
        FontFamilyEnum[FontFamilyEnum["TitanOne"] = 'titan_one'] = "TitanOne";
        FontFamilyEnum[FontFamilyEnum["LemonTuesday"] = 'lemon_tuesday'] = "LemonTuesday";
        FontFamilyEnum[FontFamilyEnum["RobotoMono"] = 'roboto_mono'] = "RobotoMono";
        FontFamilyEnum[FontFamilyEnum["NotoSans"] = 'noto_sans'] = "NotoSans";
        FontFamilyEnum[FontFamilyEnum["PlexSans"] = 'plex_sans'] = "PlexSans";
        FontFamilyEnum[FontFamilyEnum["PlexSerif"] = 'plex_serif'] = "PlexSerif";
        FontFamilyEnum[FontFamilyEnum["PlexMono"] = 'plex_mono'] = "PlexMono";
        FontFamilyEnum[FontFamilyEnum["Spoof"] = 'spoof'] = "Spoof";
        FontFamilyEnum[FontFamilyEnum["TiemposText"] = 'tiempos_text'] = "TiemposText";
    })(FontFamilyEnum = ShapeStyle.FontFamilyEnum || (ShapeStyle.FontFamilyEnum = {}));
    var TextAlignEnum;
    (function (TextAlignEnum) {
        TextAlignEnum[TextAlignEnum["Left"] = 'left'] = "Left";
        TextAlignEnum[TextAlignEnum["Right"] = 'right'] = "Right";
        TextAlignEnum[TextAlignEnum["Center"] = 'center'] = "Center";
    })(TextAlignEnum = ShapeStyle.TextAlignEnum || (ShapeStyle.TextAlignEnum = {}));
    var TextAlignVerticalEnum;
    (function (TextAlignVerticalEnum) {
        TextAlignVerticalEnum[TextAlignVerticalEnum["Top"] = 'top'] = "Top";
        TextAlignVerticalEnum[TextAlignVerticalEnum["Middle"] = 'middle'] = "Middle";
        TextAlignVerticalEnum[TextAlignVerticalEnum["Bottom"] = 'bottom'] = "Bottom";
    })(TextAlignVerticalEnum = ShapeStyle.TextAlignVerticalEnum || (ShapeStyle.TextAlignVerticalEnum = {}));
})(ShapeStyle = exports.ShapeStyle || (exports.ShapeStyle = {}));
exports.ShapeStyle = ShapeStyle;
