"use strict";
/**
 * Platform Tags
 * SCIM V1 API implemented by Miro
 *
 * The version of the OpenAPI document: v2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
exports.__esModule = true;
exports.WidgetData = void 0;
/**
* Contains the item data, such as the item title, content, or description.
*/
var WidgetData = /** @class */ (function () {
    function WidgetData() {
        /**
        * The actual text (content) that appears in the sticky note item.
        */
        this['content'] = 'Hello';
        /**
        * Defines the geometric shape of the sticky note and aspect ratio for its dimensions. Possible values: `square`, `rectangle`
        */
        this['shape'] = WidgetData.ShapeEnum.Square;
        /**
        * Only custom frames are supported at the moment. Possible values: `custom`, `desktop`, `phone`, `tablet`, `a4`, `letter`, `ratio_1x1`, `ratio_4x3`, `ratio_16x9`
        */
        this['format'] = WidgetData.FormatEnum.Custom;
        /**
        * Only free form frames are supported at the moment. Possible values: `freeform`, `heap`, `grid`, `rows`, `columns`
        */
        this['type'] = WidgetData.TypeEnum.Freeform;
    }
    WidgetData.getAttributeTypeMap = function () {
        return WidgetData.attributeTypeMap;
    };
    WidgetData.discriminator = undefined;
    WidgetData.attributeTypeMap = [
        {
            "name": "content",
            "baseName": "content",
            "type": "string"
        },
        {
            "name": "contentType",
            "baseName": "contentType",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "html",
            "baseName": "html",
            "type": "string"
        },
        {
            "name": "mode",
            "baseName": "mode",
            "type": "WidgetData.ModeEnum"
        },
        {
            "name": "providerName",
            "baseName": "providerName",
            "type": "string"
        },
        {
            "name": "providerUrl",
            "baseName": "providerUrl",
            "type": "string"
        },
        {
            "name": "title",
            "baseName": "title",
            "type": "string"
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        },
        {
            "name": "assigneeId",
            "baseName": "assigneeId",
            "type": "number"
        },
        {
            "name": "dueDate",
            "baseName": "dueDate",
            "type": "Date"
        },
        {
            "name": "fields",
            "baseName": "fields",
            "type": "Array<CustomField>"
        },
        {
            "name": "owned",
            "baseName": "owned",
            "type": "boolean"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "WidgetData.StatusEnum"
        },
        {
            "name": "shape",
            "baseName": "shape",
            "type": "WidgetData.ShapeEnum"
        },
        {
            "name": "format",
            "baseName": "format",
            "type": "WidgetData.FormatEnum"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "WidgetData.TypeEnum"
        }
    ];
    return WidgetData;
}());
exports.WidgetData = WidgetData;
(function (WidgetData) {
    var ModeEnum;
    (function (ModeEnum) {
        ModeEnum[ModeEnum["Inline"] = 'inline'] = "Inline";
        ModeEnum[ModeEnum["Modal"] = 'modal'] = "Modal";
    })(ModeEnum = WidgetData.ModeEnum || (WidgetData.ModeEnum = {}));
    var StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["Disconnected"] = 'disconnected'] = "Disconnected";
        StatusEnum[StatusEnum["Connected"] = 'connected'] = "Connected";
        StatusEnum[StatusEnum["Disabled"] = 'disabled'] = "Disabled";
    })(StatusEnum = WidgetData.StatusEnum || (WidgetData.StatusEnum = {}));
    var ShapeEnum;
    (function (ShapeEnum) {
        ShapeEnum[ShapeEnum["Square"] = 'square'] = "Square";
        ShapeEnum[ShapeEnum["Rectangle"] = 'rectangle'] = "Rectangle";
    })(ShapeEnum = WidgetData.ShapeEnum || (WidgetData.ShapeEnum = {}));
    var FormatEnum;
    (function (FormatEnum) {
        FormatEnum[FormatEnum["Custom"] = 'custom'] = "Custom";
        FormatEnum[FormatEnum["Desktop"] = 'desktop'] = "Desktop";
        FormatEnum[FormatEnum["Phone"] = 'phone'] = "Phone";
        FormatEnum[FormatEnum["Tablet"] = 'tablet'] = "Tablet";
        FormatEnum[FormatEnum["A4"] = 'a4'] = "A4";
        FormatEnum[FormatEnum["Letter"] = 'letter'] = "Letter";
        FormatEnum[FormatEnum["Ratio1x1"] = 'ratio_1x1'] = "Ratio1x1";
        FormatEnum[FormatEnum["Ratio4x3"] = 'ratio_4x3'] = "Ratio4x3";
        FormatEnum[FormatEnum["Ratio16x9"] = 'ratio_16x9'] = "Ratio16x9";
    })(FormatEnum = WidgetData.FormatEnum || (WidgetData.FormatEnum = {}));
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Freeform"] = 'freeform'] = "Freeform";
        TypeEnum[TypeEnum["Heap"] = 'heap'] = "Heap";
        TypeEnum[TypeEnum["Grid"] = 'grid'] = "Grid";
        TypeEnum[TypeEnum["Rows"] = 'rows'] = "Rows";
        TypeEnum[TypeEnum["Columns"] = 'columns'] = "Columns";
    })(TypeEnum = WidgetData.TypeEnum || (WidgetData.TypeEnum = {}));
})(WidgetData = exports.WidgetData || (exports.WidgetData = {}));
exports.WidgetData = WidgetData;
