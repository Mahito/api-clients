/**
 * Platform Tags
 * SCIM V1 API implemented by Miro
 *
 * The version of the OpenAPI document: v2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
* For information about the JSON properties, see [Style](https://developers.miro.com/reference/style).
*/
export declare class ShapeStyle {
    /**
    * Defines the color of the border of the shape. Default: `#1a1a1a` (dark gray).
    */
    'borderColor'?: string;
    /**
    * Defines the opacity level of the shape border. Possible values: any number between `0` and `1`, where:  `0`: the background color is completely transparent or invisible  `1`: the background color is completely opaque or solid Default: `1.0` (solid color)
    */
    'borderOpacity'?: string;
    /**
    * Defines the style used to represent the border of the shape. Possible values: `normal`, `dotted`, `dashed`
    */
    'borderStyle'?: ShapeStyle.BorderStyleEnum;
    /**
    * Defines the thickness of the shape border, in dp.
    */
    'borderWidth'?: string;
    /**
    * Hex value representing the color for the text within the shape item. Default: `#1a1a1a`
    */
    'color'?: string;
    /**
    * Fill color for the shape. Hex values: `#f5f6f8` `#d5f692` `#d0e17a` `#93d275` `#67c6c0` `#23bfe7` `#a6ccf5` `#7b92ff` `#fff9b1` `#f5d128` `#ff9d48` `#f16c7f` `#ea94bb` `#ffcee0` `#b384bb` `#000000` Default: #ffffffff (transparent).
    */
    'fillColor'?: string;
    /**
    * Opacity level of the fill color. Possible values: any number between `0` and `1`, where:  `0`: the background color is completely transparent or invisible  `1`: the background color is completely opaque or solid Default: `1.0` (solid color)
    */
    'fillOpacity'?: string;
    /**
    * Defines the font type for the text in the shape item. Possible values: `arial`, `abril_fatface`, `bangers`, `eb_garamond`, `georgia`, `graduate`, `gravitas_one`, `fredoka_one`, `nixie_one`, `open_sans`, `permanent_marker`, `pt_sans`, `pt_sans_narrow`, `pt_serif`, `rammetto_one`, `roboto`, `roboto_condensed`, `roboto_slab`, `caveat`, `times_new_roman`, `titan_one`, `lemon_tuesday`, `roboto_mono`, `noto_sans`, `plex_sans`, `plex_serif`, `plex_mono`, `spoof`, `tiempos_text`
    */
    'fontFamily'?: ShapeStyle.FontFamilyEnum;
    /**
    * Defines the font size, in dp, for the text on the shape.
    */
    'fontSize'?: string;
    /**
    * Defines how the sticky note text is horizontally aligned. Possible values: `left`, `right`, `center`
    */
    'textAlign'?: ShapeStyle.TextAlignEnum;
    /**
    * Defines how the sticky note text is vertically aligned. Possible values: `top`, `middle`, `bottom`
    */
    'textAlignVertical'?: ShapeStyle.TextAlignVerticalEnum;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
export declare namespace ShapeStyle {
    enum BorderStyleEnum {
        Normal,
        Dotted,
        Dashed
    }
    enum FontFamilyEnum {
        Arial,
        AbrilFatface,
        Bangers,
        EbGaramond,
        Georgia,
        Graduate,
        GravitasOne,
        FredokaOne,
        NixieOne,
        OpenSans,
        PermanentMarker,
        PtSans,
        PtSansNarrow,
        PtSerif,
        RammettoOne,
        Roboto,
        RobotoCondensed,
        RobotoSlab,
        Caveat,
        TimesNewRoman,
        TitanOne,
        LemonTuesday,
        RobotoMono,
        NotoSans,
        PlexSans,
        PlexSerif,
        PlexMono,
        Spoof,
        TiemposText
    }
    enum TextAlignEnum {
        Left,
        Right,
        Center
    }
    enum TextAlignVerticalEnum {
        Top,
        Middle,
        Bottom
    }
}
