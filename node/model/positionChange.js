"use strict";
/**
 * Platform Tags
 * SCIM V1 API implemented by Miro
 *
 * The version of the OpenAPI document: v2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
exports.__esModule = true;
exports.PositionChange = void 0;
/**
* Contains location information about the item, such as its x coordinate, y coordinate, and theorigin of the x and y coordinates.
*/
var PositionChange = /** @class */ (function () {
    function PositionChange() {
        /**
        * Area of the item that is referenced by its x and y coordinates. For example, an item with a center origin will have its x and y coordinates point to its center. The center point of the board has x: 0 and y: 0 coordinates. Currently, only one option is supported. Possible values: `center`
        */
        this['origin'] = PositionChange.OriginEnum.Center;
        /**
        * X-axis coordinate of the location of the item on the board. By default, all items have absolute positioning to the board, not the current viewport. The center point of the board has `x: 0` and `y: 0` coordinates.
        */
        this['x'] = 0;
        /**
        * Y-axis coordinate of the location of the item on the board. By default, all items have absolute positioning to the board, not the current viewport. The center point of the board has `x: 0` and `y: 0` coordinates.
        */
        this['y'] = 0;
    }
    PositionChange.getAttributeTypeMap = function () {
        return PositionChange.attributeTypeMap;
    };
    PositionChange.discriminator = undefined;
    PositionChange.attributeTypeMap = [
        {
            "name": "origin",
            "baseName": "origin",
            "type": "PositionChange.OriginEnum"
        },
        {
            "name": "x",
            "baseName": "x",
            "type": "number"
        },
        {
            "name": "y",
            "baseName": "y",
            "type": "number"
        }
    ];
    return PositionChange;
}());
exports.PositionChange = PositionChange;
(function (PositionChange) {
    var OriginEnum;
    (function (OriginEnum) {
        OriginEnum[OriginEnum["Center"] = 'center'] = "Center";
    })(OriginEnum = PositionChange.OriginEnum || (PositionChange.OriginEnum = {}));
})(PositionChange = exports.PositionChange || (exports.PositionChange = {}));
exports.PositionChange = PositionChange;
