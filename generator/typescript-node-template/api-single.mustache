{{>licenseInfo}}

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

import fetch, {Response} from 'node-fetch';
import * as http from 'http';

/* tslint:disable:no-unused-locals */
{{#imports}}
import { {{classname}} } from '{{filename}}';
{{/imports}}

import { ObjectSerializer } from '../model/models';

import { HttpError, makeJsonRequest } from './apis';

let defaultBasePath = '{{{basePath}}}';

{{#operations}}
{{#description}}
/**
* {{&description}}
*/
{{/description}}

export interface {{classname}}Methods {
    {{#operation}}
    /**
     * {{&notes}}
     {{#summary}}
     * @summary {{&summary}}
     {{/summary}}
     {{#allParams}}
     * @param {{paramName}} {{description}}
     {{/allParams}}
     */
    {{nickname}}({{#requiredParams}}{{paramName}}: {{{dataType}}}, {{/requiredParams}}
        {{#optionalParams}}
{{^isBodyParam}}{{#-first}} query?: { {{/-first}}{{/isBodyParam}}
{{#isBodyParam}}{{^-first}} }, {{/-first}} {{/isBodyParam}}
{{paramName}}?: {{{dataType}}},
{{#isQueryParam}}{{#-last}} }, {{/-last}} {{/isQueryParam}}
{{/optionalParams}}): Promise<{ response: Response; {{#returnType}}body: {{{.}}}; {{/returnType}}{{^returnType}}body?: any; {{/returnType}} }>
    {{/operation}}
}

export function {{classname}} (accessToken: string|(() => Promise<string>), basePath: string = defaultBasePath, logger?: (...thing: any) => void): {{classname}}Methods {
    return {
    {{#operation}}

        /*
        */

        {{nickname}}: async function ({{#requiredParams}}{{paramName}}: {{{dataType}}}, {{/requiredParams}}
        {{#optionalParams}}
{{^isBodyParam}}{{#-first}} query?: { {{/-first}}{{/isBodyParam}}
{{#isBodyParam}}{{^-first}} }, {{/-first}} {{/isBodyParam}}
{{paramName}}?: {{{dataType}}},
{{#isQueryParam}}{{#-last}} }, {{/-last}} {{/isQueryParam}}
{{/optionalParams}}) : Promise<{ response: Response; {{#returnType}}body: {{{.}}}; {{/returnType}}{{^returnType}}body?: any; {{/returnType}} }> {
            const localVarPath = '{{{path}}}'{{#pathParams}}
                .replace('{' + '{{baseName}}' + '}', encodeURIComponent(String({{paramName}}))){{/pathParams}};
            let localVarQueryParameters = new URLSearchParams();
    {{#pathParams}}
    {{#required}}
            // verify required parameter '{{paramName}}' is not null or undefined
            if ({{paramName}} === null || {{paramName}} === undefined) {
                throw new Error('Required parameter {{paramName}} was null or undefined when calling {{nickname}}.');
            }
    {{/required}}
    {{/pathParams}}

    {{#queryParams}}

        {{#required}}
                // verify required parameter '{{paramName}}' is not null or undefined
                if ({{paramName}} === null || {{paramName}} === undefined) {
                    throw new Error('Required parameter {{paramName}} was null or undefined when calling {{nickname}}.');
                }

        {{/required}}

            if ({{^required}}query?.{{/required}}{{paramName}} !== undefined) {
                localVarQueryParameters.append('{{baseName}}', ObjectSerializer.serialize({{^required}}query?.{{/required}}{{paramName}}, "{{{dataType}}}"));
            }

    {{/queryParams}}

            const resource = new URL(localVarPath, basePath)
            resource.search = localVarQueryParameters.toString()

            const {response, bodyAsJson} = await makeJsonRequest(
                typeof accessToken === 'function' ? await accessToken() : accessToken,
                '{{httpMethod}}',
                resource,
                {{#bodyParam}}
                JSON.stringify(ObjectSerializer.serialize({{paramName}}, "{{{dataType}}}")),
                {{/bodyParam}}
                {{^bodyParam}}
                undefined,
                {{/bodyParam}}

                logger
            )


            {{#returnType}}
            const body = ObjectSerializer.deserialize(bodyAsJson, "{{{.}}}");
            {{/returnType}}
            {{^returnType}}
            const body = bodyAsJson
            {{/returnType}}

            return {response, body}
        },
    {{/operation}}
    }
}
{{/operations}}
