/**
 * Platform Tags
 * SCIM V1 API implemented by Miro
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { UserSchemaEmailsInner } from './userSchemaEmailsInner';
import { UserSchemaGroupsInner } from './userSchemaGroupsInner';
import { UserSchemaMeta } from './userSchemaMeta';
import { UserSchemaName } from './userSchemaName';
import { UserSchemaPhotosInner } from './userSchemaPhotosInner';
import { UserSchemaRolesInner } from './userSchemaRolesInner';
import { UserSchemaUrnIetfParamsScimSchemasExtensionEnterprise20User } from './userSchemaUrnIetfParamsScimSchemasExtensionEnterprise20User';

export class UserSchema {
    'active'?: boolean;
    /**
    * Read-only key. The only email present in this array is the username. The field is ignored on POST/PUT/PATCH operations.
    */
    'emails'?: Array<UserSchemaEmailsInner>;
    /**
    * Teams of a user
    */
    'groups'?: Array<UserSchemaGroupsInner>;
    'id': string;
    'meta'?: UserSchemaMeta;
    'name'?: UserSchemaName;
    'photos'?: Array<UserSchemaPhotosInner>;
    'roles'?: Array<UserSchemaRolesInner>;
    'schemas'?: Array<string>;
    'urnietfparamsscimschemasextensionenterprise20User'?: UserSchemaUrnIetfParamsScimSchemasExtensionEnterprise20User;
    'userName': string;
    /**
    * User license type
    */
    'userType'?: UserSchema.UserTypeEnum;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "active",
            "baseName": "active",
            "type": "boolean"
        },
        {
            "name": "emails",
            "baseName": "emails",
            "type": "Array<UserSchemaEmailsInner>"
        },
        {
            "name": "groups",
            "baseName": "groups",
            "type": "Array<UserSchemaGroupsInner>"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "meta",
            "baseName": "meta",
            "type": "UserSchemaMeta"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "UserSchemaName"
        },
        {
            "name": "photos",
            "baseName": "photos",
            "type": "Array<UserSchemaPhotosInner>"
        },
        {
            "name": "roles",
            "baseName": "roles",
            "type": "Array<UserSchemaRolesInner>"
        },
        {
            "name": "schemas",
            "baseName": "schemas",
            "type": "Array<string>"
        },
        {
            "name": "urnietfparamsscimschemasextensionenterprise20User",
            "baseName": "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User",
            "type": "UserSchemaUrnIetfParamsScimSchemasExtensionEnterprise20User"
        },
        {
            "name": "userName",
            "baseName": "userName",
            "type": "string"
        },
        {
            "name": "userType",
            "baseName": "userType",
            "type": "UserSchema.UserTypeEnum"
        }    ];

    static getAttributeTypeMap() {
        return UserSchema.attributeTypeMap;
    }
}

export namespace UserSchema {
    export enum UserTypeEnum {
        Full = <any> 'Full',
        Occasional = <any> 'Occasional',
        Free = <any> 'Free',
        FreeRestricted = <any> 'Free Restricted',
        FullTrial = <any> 'Full (Trial)'
    }
}
