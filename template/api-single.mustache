{{>licenseInfo}}

import fetch, {Response} from 'node-fetch';
import * as http from 'http';

/* tslint:disable:no-unused-locals */
{{#imports}}
import { {{classname}} } from '{{filename}}';
{{/imports}}

import { ObjectSerializer } from '../model/models';

import { HttpError } from './apis';

let defaultBasePath = '{{{basePath}}}';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

{{#operations}}
{{#description}}
/**
* {{&description}}
*/
{{/description}}

export interface {{classname}}Methods {
    {{#operation}}
    {{nickname}}({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}): Promise<{ response: Response; {{#returnType}}body: {{{.}}}; {{/returnType}}{{^returnType}}body?: any; {{/returnType}} }>
    {{/operation}}
}

export function {{classname}} (accessToken: string, basePath: string = defaultBasePath, logger?: (...thing: any) => void): {{classname}}Methods {
    return {
    {{#operation}}
        /**
         * {{&notes}}
         {{#summary}}
         * @summary {{&summary}}
         {{/summary}}
         {{#allParams}}
         * @param {{paramName}} {{description}}
         {{/allParams}}
         */
        {{nickname}}: async function ({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}) : Promise<{ response: Response; {{#returnType}}body: {{{.}}}; {{/returnType}}{{^returnType}}body?: any; {{/returnType}} }> {
            const localVarPath = '{{{path}}}'{{#pathParams}}
                .replace('{' + '{{baseName}}' + '}', encodeURIComponent(String({{paramName}}))){{/pathParams}};
            let localVarQueryParameters = new URLSearchParams();
            let localVarHeaderParams: Record<string, string> = {}
    {{#hasProduces}}
            const produces = [{{#produces}}'{{{mediaType}}}'{{^-last}}, {{/-last}}{{/produces}}];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
    {{/hasProduces}}

    {{#allParams}}
    {{#required}}
            // verify required parameter '{{paramName}}' is not null or undefined
            if ({{paramName}} === null || {{paramName}} === undefined) {
                throw new Error('Required parameter {{paramName}} was null or undefined when calling {{nickname}}.');
            }

    {{/required}}
    {{/allParams}}
    {{#queryParams}}
            if ({{paramName}} !== undefined) {
                localVarQueryParameters.append('{{baseName}}', ObjectSerializer.serialize({{paramName}}, "{{{dataType}}}"));
            }

    {{/queryParams}}

            const resource = new URL(localVarPath, basePath)
            resource.search = localVarQueryParameters.toString()


const options = {
                method: '{{httpMethod}}',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${accessToken}`
                },
                {{#bodyParam}}
                body: JSON.stringify(ObjectSerializer.serialize({{paramName}}, "{{{dataType}}}"))
                {{/bodyParam}}
            }

            if (typeof logger === 'function') logger('FETCH', resource.toString(), options)

            const response = await fetch(resource, options)

            if (typeof logger === 'function') logger('RESPONSE', response)

            let bodyAsJson: unknown
            try {
                bodyAsJson = await response.json()
            } catch (err) {
                // Body doesn't have valid json
            }

            if (!response.ok) {
                throw new HttpError(response, bodyAsJson, response.status)
            }

            {{#returnType}}
            const body = ObjectSerializer.deserialize(bodyAsJson, "{{{.}}}");
            {{/returnType}}
            {{^returnType}}
            const body = bodyAsJson
            {{/returnType}}

            return({response, body})
        },
    {{/operation}}
    }
}
{{/operations}}
