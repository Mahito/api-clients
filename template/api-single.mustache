{{>licenseInfo}}

import localVarRequest from 'request';
import * as http from 'http';

/* tslint:disable:no-unused-locals */
{{#imports}}
import { {{classname}} } from '{{filename}}';
{{/imports}}

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';
{{#hasAuthMethods}}
import { HttpBasicAuth, HttpBearerAuth, ApiKeyAuth, OAuth } from '../model/models';
{{/hasAuthMethods}}

import { HttpError, RequestFile } from './apis';

let defaultBasePath = '{{{basePath}}}';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

{{#operations}}
{{#description}}
/**
* {{&description}}
*/
{{/description}}

export function {{classname}} (accessToken: string) {
    return {
    {{#operation}}
        /**
         * {{&notes}}
         {{#summary}}
         * @summary {{&summary}}
         {{/summary}}
         {{#allParams}}
         * @param {{paramName}} {{description}}
         {{/allParams}}
         */
        {{nickname}}: async function ({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}) : Promise<{ response: http.IncomingMessage; {{#returnType}}body: {{{.}}}; {{/returnType}}{{^returnType}}body?: any; {{/returnType}} }> {
            const localVarPath = defaultBasePath + '{{{path}}}'{{#pathParams}}
                .replace('{{{baseName}}}', encodeURIComponent(String({{paramName}}))){{/pathParams}};
            let localVarQueryParameters: Record<string, unknown> = {};
            let localVarHeaderParams: Record<string, string> = {}
    {{#hasProduces}}
            const produces = [{{#produces}}'{{{mediaType}}}'{{^-last}}, {{/-last}}{{/produces}}];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
    {{/hasProduces}}

    {{#allParams}}
    {{#required}}
            // verify required parameter '{{paramName}}' is not null or undefined
            if ({{paramName}} === null || {{paramName}} === undefined) {
                throw new Error('Required parameter {{paramName}} was null or undefined when calling {{nickname}}.');
            }

    {{/required}}
    {{/allParams}}
    {{#queryParams}}
            if ({{paramName}} !== undefined) {
                localVarQueryParameters['{{baseName}}'] = ObjectSerializer.serialize({{paramName}}, "{{{dataType}}}");
            }

    {{/queryParams}}

            let localVarRequestOptions: localVarRequest.Options = {
                method: '{{httpMethod}}',
                qs: localVarQueryParameters,
                uri: localVarPath,
                json: true,
                headers: {
                    'Authorization': `Bearer ${accessToken}`
                },
    {{#bodyParam}}
                body: ObjectSerializer.serialize({{paramName}}, "{{{dataType}}}")
    {{/bodyParam}}
            };

            return new Promise<{ response: http.IncomingMessage; {{#returnType}}body: {{{.}}}; {{/returnType}}{{^returnType}}body?: any; {{/returnType}} }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                        return
                    }

                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        {{#returnType}}
                        body = ObjectSerializer.deserialize(body, "{{{.}}}");
                        {{/returnType}}
                        resolve({ response: response, body: body });
                        return
                    }

                    reject(new HttpError(response, body, response.statusCode));
                });
            });
        },
    {{/operation}}
    }
}
{{/operations}}
