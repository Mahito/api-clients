{{#apiInfo}}
{{#apis}}
{{#operations}}
import { {{ classname }}, {{ classname }}Methods } from './{{ classFilename }}';
export { {{ classname }}Methods } from './{{ classFilename }}';
{{/operations}}
{{#withInterfaces}}
// export * from './{{ classFilename }}Interface'
{{/withInterfaces}}
{{/apis}}
import {Response} from 'node-fetch';

export class HttpError extends Error {
    constructor (public response: Response, public body: any, public statusCode?: number) {
        super('HTTP request failed');
        this.name = 'HttpError';
    }
}

let defaultBasePath = '{{{basePath}}}';

export type MiroEndpoints =
    {{#apis}}
    {{#operations}}{{ classname }}Methods{{/operations}}{{^-last}} & {{/-last}}
    {{/apis}}

export function MiroApi (accessToken: string, basePath: string = defaultBasePath, logger?: (...thing: any) => void): MiroEndpoints {
    return {
        {{#apis}}
        {{#operations}}...{{ classname }}(accessToken, basePath, logger){{/operations}},
        {{/apis}}
    }
}
{{/apiInfo}}
